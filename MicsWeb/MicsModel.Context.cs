//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MicsWeb
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class mics_serverEntities : DbContext
    {
        public mics_serverEntities()
            : base("name=mics_serverEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<OrderNumber> OrderNumbers { get; set; }
        public virtual DbSet<OrderStatu> OrderStatus { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PaymentMethod> PaymentMethods { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductAdjustmentHistory> ProductAdjustmentHistories { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<ProductCostHistory> ProductCostHistories { get; set; }
        public virtual DbSet<ProductInventory> ProductInventories { get; set; }
        public virtual DbSet<ProductListPriceHistory> ProductListPriceHistories { get; set; }
        public virtual DbSet<ProductSubcategory> ProductSubcategories { get; set; }
        public virtual DbSet<ProductVendor> ProductVendors { get; set; }
        public virtual DbSet<PurchaseInvoiceDetail> PurchaseInvoiceDetails { get; set; }
        public virtual DbSet<PurchaseInvoiceHeader> PurchaseInvoiceHeaders { get; set; }
        public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }
        public virtual DbSet<PurchaseOrderHeader> PurchaseOrderHeaders { get; set; }
        public virtual DbSet<SalesInvoiceDetail> SalesInvoiceDetails { get; set; }
        public virtual DbSet<SalesInvoiceHeader> SalesInvoiceHeaders { get; set; }
        public virtual DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }
        public virtual DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; }
        public virtual DbSet<SalesPerson> SalesPersons { get; set; }
        public virtual DbSet<SalesTaxRate> SalesTaxRates { get; set; }
        public virtual DbSet<SalesTerritory> SalesTerritories { get; set; }
        public virtual DbSet<SalesTerritoryHistory> SalesTerritoryHistories { get; set; }
        public virtual DbSet<ShipMethod> ShipMethods { get; set; }
        public virtual DbSet<SpecialOffer> SpecialOffers { get; set; }
        public virtual DbSet<SpecialOfferProduct> SpecialOfferProducts { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<SalesPersonQuotaHistory> SalesPersonQuotaHistories { get; set; }
        public virtual DbSet<Employee_Address_View> Employee_Address_View { get; set; }
        public virtual DbSet<InvoicesBalance_View> InvoicesBalance_View { get; set; }
        public virtual DbSet<SaleOrder_View> SaleOrder_View { get; set; }
        public virtual DbSet<SalesPerson_view> SalesPerson_view { get; set; }
        public virtual DbSet<SalesTerritoryList_View> SalesTerritoryList_View { get; set; }
    
        public virtual int DeleteAddress(Nullable<int> addressID)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAddress", addressIDParameter);
        }
    
        public virtual int DeleteAddressesDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAddressesDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteCustomer(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCustomer", customerIDParameter);
        }
    
        public virtual int DeleteCustomersDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCustomersDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteEmployee(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmployee", employeeIDParameter);
        }
    
        public virtual int DeleteEmployeesDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmployeesDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteLocation(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteLocation", locationIDParameter);
        }
    
        public virtual int DeleteLocationsDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteLocationsDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteOrderNumber(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOrderNumber", idParameter);
        }
    
        public virtual int DeleteOrderNumbersDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOrderNumbersDynamic", whereConditionParameter);
        }
    
        public virtual int DeletePayment(Nullable<int> paymentID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePayment", paymentIDParameter);
        }
    
        public virtual int DeletePaymentMethod(Nullable<int> paymentMethodID)
        {
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePaymentMethod", paymentMethodIDParameter);
        }
    
        public virtual int DeletePaymentMethodsDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePaymentMethodsDynamic", whereConditionParameter);
        }
    
        public virtual int DeletePaymentsDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePaymentsDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteProduct(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProduct", productIDParameter);
        }
    
        public virtual int DeleteProductAdjustmentHistoriesDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductAdjustmentHistoriesDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteProductAdjustmentHistory(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductAdjustmentHistory", iDParameter);
        }
    
        public virtual int DeleteProductCategoriesDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductCategoriesDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteProductCategory(Nullable<int> productCategoryID)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductCategory", productCategoryIDParameter);
        }
    
        public virtual int DeleteProductCostHistoriesDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductCostHistoriesDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteProductCostHistory(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductCostHistory", iDParameter);
        }
    
        public virtual int DeleteProductInventoriesDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductInventoriesDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteProductInventory(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductInventory", productIDParameter);
        }
    
        public virtual int DeleteProductListPriceHistoriesDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductListPriceHistoriesDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteProductListPriceHistory(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductListPriceHistory", iDParameter);
        }
    
        public virtual int DeleteProductsDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductsDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteProductSubcategoriesDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductSubcategoriesDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteProductSubcategory(Nullable<int> productSubcategoryID)
        {
            var productSubcategoryIDParameter = productSubcategoryID.HasValue ?
                new ObjectParameter("ProductSubcategoryID", productSubcategoryID) :
                new ObjectParameter("ProductSubcategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductSubcategory", productSubcategoryIDParameter);
        }
    
        public virtual int DeleteProductVendor(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductVendor", productIDParameter);
        }
    
        public virtual int DeleteProductVendorsDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProductVendorsDynamic", whereConditionParameter);
        }
    
        public virtual int DeletePurchaseInvoiceDetail(Nullable<int> invoiceDetailID)
        {
            var invoiceDetailIDParameter = invoiceDetailID.HasValue ?
                new ObjectParameter("InvoiceDetailID", invoiceDetailID) :
                new ObjectParameter("InvoiceDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePurchaseInvoiceDetail", invoiceDetailIDParameter);
        }
    
        public virtual int DeletePurchaseInvoiceDetailsDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePurchaseInvoiceDetailsDynamic", whereConditionParameter);
        }
    
        public virtual int DeletePurchaseInvoiceHeader(Nullable<int> invoiceID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePurchaseInvoiceHeader", invoiceIDParameter);
        }
    
        public virtual int DeletePurchaseInvoiceHeadersDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePurchaseInvoiceHeadersDynamic", whereConditionParameter);
        }
    
        public virtual int DeletePurchaseOrderDetail(Nullable<int> purchaseOrderID)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePurchaseOrderDetail", purchaseOrderIDParameter);
        }
    
        public virtual int DeletePurchaseOrderDetailsDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePurchaseOrderDetailsDynamic", whereConditionParameter);
        }
    
        public virtual int DeletePurchaseOrderHeader(Nullable<int> purchaseOrderID)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePurchaseOrderHeader", purchaseOrderIDParameter);
        }
    
        public virtual int DeletePurchaseOrderHeadersDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePurchaseOrderHeadersDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteSalesInvoiceDetail(Nullable<int> invoiceDetailID)
        {
            var invoiceDetailIDParameter = invoiceDetailID.HasValue ?
                new ObjectParameter("InvoiceDetailID", invoiceDetailID) :
                new ObjectParameter("InvoiceDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesInvoiceDetail", invoiceDetailIDParameter);
        }
    
        public virtual int DeleteSalesInvoiceDetailsDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesInvoiceDetailsDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteSalesInvoiceHeader(Nullable<int> invoiceID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesInvoiceHeader", invoiceIDParameter);
        }
    
        public virtual int DeleteSalesInvoiceHeadersDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesInvoiceHeadersDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteSalesOrderDetail(Nullable<int> salesOrderID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesOrderDetail", salesOrderIDParameter);
        }
    
        public virtual int DeleteSalesOrderDetailsDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesOrderDetailsDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteSalesOrderHeader(Nullable<int> salesOrderID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesOrderHeader", salesOrderIDParameter);
        }
    
        public virtual int DeleteSalesOrderHeadersDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesOrderHeadersDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteSalesPerson(Nullable<int> salesPersonID)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesPerson", salesPersonIDParameter);
        }
    
        public virtual int DeleteSalesPersonQuotaHistoriesDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesPersonQuotaHistoriesDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteSalesPersonQuotaHistory(Nullable<int> salesPersonID)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesPersonQuotaHistory", salesPersonIDParameter);
        }
    
        public virtual int DeleteSalesPersonsDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesPersonsDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteSalesTaxRate(Nullable<int> salesTaxRateID)
        {
            var salesTaxRateIDParameter = salesTaxRateID.HasValue ?
                new ObjectParameter("SalesTaxRateID", salesTaxRateID) :
                new ObjectParameter("SalesTaxRateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesTaxRate", salesTaxRateIDParameter);
        }
    
        public virtual int DeleteSalesTaxRatesDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesTaxRatesDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteSalesTerritoriesDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesTerritoriesDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteSalesTerritory(Nullable<int> territoryID)
        {
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesTerritory", territoryIDParameter);
        }
    
        public virtual int DeleteSalesTerritoryHistoriesDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesTerritoryHistoriesDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteSalesTerritoryHistory(Nullable<int> salesPersonID, Nullable<System.DateTime> endDate)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalesTerritoryHistory", salesPersonIDParameter, endDateParameter);
        }
    
        public virtual int DeleteShipMethod(Nullable<int> shipMethodID)
        {
            var shipMethodIDParameter = shipMethodID.HasValue ?
                new ObjectParameter("ShipMethodID", shipMethodID) :
                new ObjectParameter("ShipMethodID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteShipMethod", shipMethodIDParameter);
        }
    
        public virtual int DeleteShipMethodsDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteShipMethodsDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteSpecialOffer(Nullable<int> specialOfferID)
        {
            var specialOfferIDParameter = specialOfferID.HasValue ?
                new ObjectParameter("SpecialOfferID", specialOfferID) :
                new ObjectParameter("SpecialOfferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSpecialOffer", specialOfferIDParameter);
        }
    
        public virtual int DeleteSpecialOfferProduct(Nullable<int> specialOfferID)
        {
            var specialOfferIDParameter = specialOfferID.HasValue ?
                new ObjectParameter("SpecialOfferID", specialOfferID) :
                new ObjectParameter("SpecialOfferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSpecialOfferProduct", specialOfferIDParameter);
        }
    
        public virtual int DeleteSpecialOfferProductsDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSpecialOfferProductsDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteSpecialOffersDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSpecialOffersDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteUser(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", iDParameter);
        }
    
        public virtual int DeleteUsersDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUsersDynamic", whereConditionParameter);
        }
    
        public virtual int DeleteVendor(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteVendor", vendorIDParameter);
        }
    
        public virtual int DeleteVendorsDynamic(string whereCondition)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteVendorsDynamic", whereConditionParameter);
        }
    
        public virtual int FixAddress()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FixAddress");
        }
    
        public virtual int InsertAddress(string addressLine1, string addressLine2, string city, string stateProvince, string postalCode, Nullable<System.DateTime> modifiedDate, ObjectParameter addressID)
        {
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateProvinceParameter = stateProvince != null ?
                new ObjectParameter("StateProvince", stateProvince) :
                new ObjectParameter("StateProvince", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAddress", addressLine1Parameter, addressLine2Parameter, cityParameter, stateProvinceParameter, postalCodeParameter, modifiedDateParameter, addressID);
        }
    
        public virtual int InsertCustomer(Nullable<int> territoryID, Nullable<int> addressID, string accountNumber, Nullable<decimal> creditLimit, Nullable<short> deliveryDay, string customerType, string name, string contactName, string email, string phone, string secondPhone, string fax, Nullable<System.DateTime> modifiedDate, Nullable<int> billingAddressID, ObjectParameter customerID, Nullable<bool> activeFlag)
        {
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var creditLimitParameter = creditLimit.HasValue ?
                new ObjectParameter("CreditLimit", creditLimit) :
                new ObjectParameter("CreditLimit", typeof(decimal));
    
            var deliveryDayParameter = deliveryDay.HasValue ?
                new ObjectParameter("DeliveryDay", deliveryDay) :
                new ObjectParameter("DeliveryDay", typeof(short));
    
            var customerTypeParameter = customerType != null ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var secondPhoneParameter = secondPhone != null ?
                new ObjectParameter("SecondPhone", secondPhone) :
                new ObjectParameter("SecondPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var activeFlagParameter = activeFlag.HasValue ?
                new ObjectParameter("ActiveFlag", activeFlag) :
                new ObjectParameter("ActiveFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCustomer", territoryIDParameter, addressIDParameter, accountNumberParameter, creditLimitParameter, deliveryDayParameter, customerTypeParameter, nameParameter, contactNameParameter, emailParameter, phoneParameter, secondPhoneParameter, faxParameter, modifiedDateParameter, billingAddressIDParameter, customerID, activeFlagParameter);
        }
    
        public virtual int InsertEmployee(string firstName, string lastName, string middleName, string login, Nullable<int> addressID, string workPhone, string homePhone, string cellPhone, ObjectParameter employeeID)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEmployee", firstNameParameter, lastNameParameter, middleNameParameter, loginParameter, addressIDParameter, workPhoneParameter, homePhoneParameter, cellPhoneParameter, employeeID);
        }
    
        public virtual int InsertLocation(Nullable<int> addressID, string name, Nullable<System.DateTime> modifiedDate, ObjectParameter locationID)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLocation", addressIDParameter, nameParameter, modifiedDateParameter, locationID);
        }
    
        public virtual int InsertOrderNumber(Nullable<System.DateTime> today, Nullable<int> seqNumber, Nullable<int> orderType, ObjectParameter id)
        {
            var todayParameter = today.HasValue ?
                new ObjectParameter("today", today) :
                new ObjectParameter("today", typeof(System.DateTime));
    
            var seqNumberParameter = seqNumber.HasValue ?
                new ObjectParameter("SeqNumber", seqNumber) :
                new ObjectParameter("SeqNumber", typeof(int));
    
            var orderTypeParameter = orderType.HasValue ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOrderNumber", todayParameter, seqNumberParameter, orderTypeParameter, id);
        }
    
        public virtual int InsertPayment(Nullable<int> invoiceID, string paymentType, Nullable<System.DateTime> paymentDate, Nullable<decimal> amount, string comments, Nullable<System.DateTime> modifiedDate, string checkNumber, ObjectParameter paymentID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var checkNumberParameter = checkNumber != null ?
                new ObjectParameter("CheckNumber", checkNumber) :
                new ObjectParameter("CheckNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPayment", invoiceIDParameter, paymentTypeParameter, paymentDateParameter, amountParameter, commentsParameter, modifiedDateParameter, checkNumberParameter, paymentID);
        }
    
        public virtual int InsertPaymentMethod(string name, ObjectParameter paymentMethodID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPaymentMethod", nameParameter, paymentMethodID);
        }
    
        public virtual int InsertProduct(string name, string description, string productNumber, Nullable<bool> makeFlag, Nullable<bool> finishedGoodsFlag, string color, Nullable<short> safetyStockLevel, Nullable<short> reorderPoint, Nullable<decimal> standardCost, Nullable<decimal> listPrice, string size, string sizeUnitMeasureCode, string weightUnitMeasureCode, Nullable<decimal> weight, Nullable<int> daysToManufacture, string productLine, string @class, string style, Nullable<int> productSubcategoryID, Nullable<int> productModelID, Nullable<System.DateTime> sellStartDate, Nullable<System.DateTime> sellEndDate, Nullable<System.DateTime> discontinuedDate, Nullable<System.DateTime> modifiedDate, ObjectParameter productID, Nullable<int> primaryVendorId, Nullable<int> secondaryVendorId, Nullable<bool> activeFlag, string comments)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var productNumberParameter = productNumber != null ?
                new ObjectParameter("ProductNumber", productNumber) :
                new ObjectParameter("ProductNumber", typeof(string));
    
            var makeFlagParameter = makeFlag.HasValue ?
                new ObjectParameter("MakeFlag", makeFlag) :
                new ObjectParameter("MakeFlag", typeof(bool));
    
            var finishedGoodsFlagParameter = finishedGoodsFlag.HasValue ?
                new ObjectParameter("FinishedGoodsFlag", finishedGoodsFlag) :
                new ObjectParameter("FinishedGoodsFlag", typeof(bool));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var safetyStockLevelParameter = safetyStockLevel.HasValue ?
                new ObjectParameter("SafetyStockLevel", safetyStockLevel) :
                new ObjectParameter("SafetyStockLevel", typeof(short));
    
            var reorderPointParameter = reorderPoint.HasValue ?
                new ObjectParameter("ReorderPoint", reorderPoint) :
                new ObjectParameter("ReorderPoint", typeof(short));
    
            var standardCostParameter = standardCost.HasValue ?
                new ObjectParameter("StandardCost", standardCost) :
                new ObjectParameter("StandardCost", typeof(decimal));
    
            var listPriceParameter = listPrice.HasValue ?
                new ObjectParameter("ListPrice", listPrice) :
                new ObjectParameter("ListPrice", typeof(decimal));
    
            var sizeParameter = size != null ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(string));
    
            var sizeUnitMeasureCodeParameter = sizeUnitMeasureCode != null ?
                new ObjectParameter("SizeUnitMeasureCode", sizeUnitMeasureCode) :
                new ObjectParameter("SizeUnitMeasureCode", typeof(string));
    
            var weightUnitMeasureCodeParameter = weightUnitMeasureCode != null ?
                new ObjectParameter("WeightUnitMeasureCode", weightUnitMeasureCode) :
                new ObjectParameter("WeightUnitMeasureCode", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var daysToManufactureParameter = daysToManufacture.HasValue ?
                new ObjectParameter("DaysToManufacture", daysToManufacture) :
                new ObjectParameter("DaysToManufacture", typeof(int));
    
            var productLineParameter = productLine != null ?
                new ObjectParameter("ProductLine", productLine) :
                new ObjectParameter("ProductLine", typeof(string));
    
            var classParameter = @class != null ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(string));
    
            var styleParameter = style != null ?
                new ObjectParameter("Style", style) :
                new ObjectParameter("Style", typeof(string));
    
            var productSubcategoryIDParameter = productSubcategoryID.HasValue ?
                new ObjectParameter("ProductSubcategoryID", productSubcategoryID) :
                new ObjectParameter("ProductSubcategoryID", typeof(int));
    
            var productModelIDParameter = productModelID.HasValue ?
                new ObjectParameter("ProductModelID", productModelID) :
                new ObjectParameter("ProductModelID", typeof(int));
    
            var sellStartDateParameter = sellStartDate.HasValue ?
                new ObjectParameter("SellStartDate", sellStartDate) :
                new ObjectParameter("SellStartDate", typeof(System.DateTime));
    
            var sellEndDateParameter = sellEndDate.HasValue ?
                new ObjectParameter("SellEndDate", sellEndDate) :
                new ObjectParameter("SellEndDate", typeof(System.DateTime));
    
            var discontinuedDateParameter = discontinuedDate.HasValue ?
                new ObjectParameter("DiscontinuedDate", discontinuedDate) :
                new ObjectParameter("DiscontinuedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var primaryVendorIdParameter = primaryVendorId.HasValue ?
                new ObjectParameter("PrimaryVendorId", primaryVendorId) :
                new ObjectParameter("PrimaryVendorId", typeof(int));
    
            var secondaryVendorIdParameter = secondaryVendorId.HasValue ?
                new ObjectParameter("SecondaryVendorId", secondaryVendorId) :
                new ObjectParameter("SecondaryVendorId", typeof(int));
    
            var activeFlagParameter = activeFlag.HasValue ?
                new ObjectParameter("ActiveFlag", activeFlag) :
                new ObjectParameter("ActiveFlag", typeof(bool));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProduct", nameParameter, descriptionParameter, productNumberParameter, makeFlagParameter, finishedGoodsFlagParameter, colorParameter, safetyStockLevelParameter, reorderPointParameter, standardCostParameter, listPriceParameter, sizeParameter, sizeUnitMeasureCodeParameter, weightUnitMeasureCodeParameter, weightParameter, daysToManufactureParameter, productLineParameter, classParameter, styleParameter, productSubcategoryIDParameter, productModelIDParameter, sellStartDateParameter, sellEndDateParameter, discontinuedDateParameter, modifiedDateParameter, productID, primaryVendorIdParameter, secondaryVendorIdParameter, activeFlagParameter, commentsParameter);
        }
    
        public virtual int InsertProductAdjustmentHistory(Nullable<int> productID, Nullable<int> adjustedQuantity, string reason, Nullable<System.DateTime> modifiedDate, ObjectParameter iD)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var adjustedQuantityParameter = adjustedQuantity.HasValue ?
                new ObjectParameter("AdjustedQuantity", adjustedQuantity) :
                new ObjectParameter("AdjustedQuantity", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProductAdjustmentHistory", productIDParameter, adjustedQuantityParameter, reasonParameter, modifiedDateParameter, iD);
        }
    
        public virtual int InsertProductCategory(string name, Nullable<System.DateTime> modifiedDate, ObjectParameter productCategoryID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProductCategory", nameParameter, modifiedDateParameter, productCategoryID);
        }
    
        public virtual int InsertProductCostHistory(Nullable<int> productID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> standardCost, Nullable<System.DateTime> modifiedDate, ObjectParameter iD)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var standardCostParameter = standardCost.HasValue ?
                new ObjectParameter("StandardCost", standardCost) :
                new ObjectParameter("StandardCost", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProductCostHistory", productIDParameter, startDateParameter, endDateParameter, standardCostParameter, modifiedDateParameter, iD);
        }
    
        public virtual int InsertProductInventory(Nullable<int> productID, Nullable<int> locationID, string shelf, Nullable<byte> bin, Nullable<short> quantity, Nullable<System.DateTime> modifiedDate)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var shelfParameter = shelf != null ?
                new ObjectParameter("Shelf", shelf) :
                new ObjectParameter("Shelf", typeof(string));
    
            var binParameter = bin.HasValue ?
                new ObjectParameter("Bin", bin) :
                new ObjectParameter("Bin", typeof(byte));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(short));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProductInventory", productIDParameter, locationIDParameter, shelfParameter, binParameter, quantityParameter, modifiedDateParameter);
        }
    
        public virtual int InsertProductListPriceHistory(ObjectParameter iD, Nullable<int> productID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> listPrice, Nullable<System.DateTime> modifiedDate)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var listPriceParameter = listPrice.HasValue ?
                new ObjectParameter("ListPrice", listPrice) :
                new ObjectParameter("ListPrice", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProductListPriceHistory", iD, productIDParameter, startDateParameter, endDateParameter, listPriceParameter, modifiedDateParameter);
        }
    
        public virtual int InsertProductSubcategory(Nullable<int> productCategoryID, string name, Nullable<System.DateTime> modifiedDate, ObjectParameter productSubcategoryID)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProductSubcategory", productCategoryIDParameter, nameParameter, modifiedDateParameter, productSubcategoryID);
        }
    
        public virtual int InsertProductVendor(Nullable<int> productID, Nullable<int> vendorID, Nullable<int> averageLeadTime, Nullable<decimal> standardPrice, Nullable<decimal> lastReceiptCost, Nullable<System.DateTime> lastReceiptDate, Nullable<int> minOrderQty, Nullable<int> maxOrderQty, Nullable<int> onOrderQty, string unitMeasureCode, Nullable<System.DateTime> modifiedDate)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var averageLeadTimeParameter = averageLeadTime.HasValue ?
                new ObjectParameter("AverageLeadTime", averageLeadTime) :
                new ObjectParameter("AverageLeadTime", typeof(int));
    
            var standardPriceParameter = standardPrice.HasValue ?
                new ObjectParameter("StandardPrice", standardPrice) :
                new ObjectParameter("StandardPrice", typeof(decimal));
    
            var lastReceiptCostParameter = lastReceiptCost.HasValue ?
                new ObjectParameter("LastReceiptCost", lastReceiptCost) :
                new ObjectParameter("LastReceiptCost", typeof(decimal));
    
            var lastReceiptDateParameter = lastReceiptDate.HasValue ?
                new ObjectParameter("LastReceiptDate", lastReceiptDate) :
                new ObjectParameter("LastReceiptDate", typeof(System.DateTime));
    
            var minOrderQtyParameter = minOrderQty.HasValue ?
                new ObjectParameter("MinOrderQty", minOrderQty) :
                new ObjectParameter("MinOrderQty", typeof(int));
    
            var maxOrderQtyParameter = maxOrderQty.HasValue ?
                new ObjectParameter("MaxOrderQty", maxOrderQty) :
                new ObjectParameter("MaxOrderQty", typeof(int));
    
            var onOrderQtyParameter = onOrderQty.HasValue ?
                new ObjectParameter("OnOrderQty", onOrderQty) :
                new ObjectParameter("OnOrderQty", typeof(int));
    
            var unitMeasureCodeParameter = unitMeasureCode != null ?
                new ObjectParameter("UnitMeasureCode", unitMeasureCode) :
                new ObjectParameter("UnitMeasureCode", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProductVendor", productIDParameter, vendorIDParameter, averageLeadTimeParameter, standardPriceParameter, lastReceiptCostParameter, lastReceiptDateParameter, minOrderQtyParameter, maxOrderQtyParameter, onOrderQtyParameter, unitMeasureCodeParameter, modifiedDateParameter);
        }
    
        public virtual int InsertPurchaseInvoiceDetail(Nullable<int> invoiceID, Nullable<int> productID, Nullable<decimal> unitPrice, Nullable<long> quantity, Nullable<System.DateTime> modifiedDate, ObjectParameter invoiceDetailID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(long));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPurchaseInvoiceDetail", invoiceIDParameter, productIDParameter, unitPriceParameter, quantityParameter, modifiedDateParameter, invoiceDetailID);
        }
    
        public virtual int InsertPurchaseInvoiceHeader(string invoiceNumber, Nullable<byte> status, Nullable<int> employeeID, Nullable<int> purchaseOrderID, Nullable<int> vendorID, Nullable<System.DateTime> invoiceDate, Nullable<decimal> subTotal, Nullable<decimal> taxAmt, Nullable<decimal> freight, Nullable<decimal> totalDue, Nullable<System.DateTime> modifiedDate, ObjectParameter invoiceID)
        {
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var taxAmtParameter = taxAmt.HasValue ?
                new ObjectParameter("TaxAmt", taxAmt) :
                new ObjectParameter("TaxAmt", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var totalDueParameter = totalDue.HasValue ?
                new ObjectParameter("TotalDue", totalDue) :
                new ObjectParameter("TotalDue", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPurchaseInvoiceHeader", invoiceNumberParameter, statusParameter, employeeIDParameter, purchaseOrderIDParameter, vendorIDParameter, invoiceDateParameter, subTotalParameter, taxAmtParameter, freightParameter, totalDueParameter, modifiedDateParameter, invoiceID);
        }
    
        public virtual int InsertPurchaseOrderDetail(Nullable<int> purchaseOrderID, ObjectParameter purchaseOrderDetailID, Nullable<System.DateTime> dueDate, Nullable<short> orderQty, Nullable<int> productID, Nullable<decimal> unitPrice, Nullable<double> numberOfCases, Nullable<int> unitPerCase, Nullable<long> receivedQty, Nullable<long> rejectedQty, Nullable<long> stockedQty, Nullable<System.DateTime> modifiedDate)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var orderQtyParameter = orderQty.HasValue ?
                new ObjectParameter("OrderQty", orderQty) :
                new ObjectParameter("OrderQty", typeof(short));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var numberOfCasesParameter = numberOfCases.HasValue ?
                new ObjectParameter("NumberOfCases", numberOfCases) :
                new ObjectParameter("NumberOfCases", typeof(double));
    
            var unitPerCaseParameter = unitPerCase.HasValue ?
                new ObjectParameter("UnitPerCase", unitPerCase) :
                new ObjectParameter("UnitPerCase", typeof(int));
    
            var receivedQtyParameter = receivedQty.HasValue ?
                new ObjectParameter("ReceivedQty", receivedQty) :
                new ObjectParameter("ReceivedQty", typeof(long));
    
            var rejectedQtyParameter = rejectedQty.HasValue ?
                new ObjectParameter("RejectedQty", rejectedQty) :
                new ObjectParameter("RejectedQty", typeof(long));
    
            var stockedQtyParameter = stockedQty.HasValue ?
                new ObjectParameter("StockedQty", stockedQty) :
                new ObjectParameter("StockedQty", typeof(long));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPurchaseOrderDetail", purchaseOrderIDParameter, purchaseOrderDetailID, dueDateParameter, orderQtyParameter, productIDParameter, unitPriceParameter, numberOfCasesParameter, unitPerCaseParameter, receivedQtyParameter, rejectedQtyParameter, stockedQtyParameter, modifiedDateParameter);
        }
    
        public virtual int InsertPurchaseOrderHeader(string revisionNumber, Nullable<byte> status, Nullable<int> employeeID, Nullable<int> vendorID, Nullable<int> shipMethodID, Nullable<System.DateTime> orderDate, Nullable<System.DateTime> shipDate, Nullable<decimal> subTotal, Nullable<decimal> taxAmt, Nullable<decimal> freight, Nullable<decimal> totalDue, Nullable<System.DateTime> modifiedDate, ObjectParameter purchaseOrderID)
        {
            var revisionNumberParameter = revisionNumber != null ?
                new ObjectParameter("RevisionNumber", revisionNumber) :
                new ObjectParameter("RevisionNumber", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var shipMethodIDParameter = shipMethodID.HasValue ?
                new ObjectParameter("ShipMethodID", shipMethodID) :
                new ObjectParameter("ShipMethodID", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var shipDateParameter = shipDate.HasValue ?
                new ObjectParameter("ShipDate", shipDate) :
                new ObjectParameter("ShipDate", typeof(System.DateTime));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var taxAmtParameter = taxAmt.HasValue ?
                new ObjectParameter("TaxAmt", taxAmt) :
                new ObjectParameter("TaxAmt", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var totalDueParameter = totalDue.HasValue ?
                new ObjectParameter("TotalDue", totalDue) :
                new ObjectParameter("TotalDue", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPurchaseOrderHeader", revisionNumberParameter, statusParameter, employeeIDParameter, vendorIDParameter, shipMethodIDParameter, orderDateParameter, shipDateParameter, subTotalParameter, taxAmtParameter, freightParameter, totalDueParameter, modifiedDateParameter, purchaseOrderID);
        }
    
        public virtual int InsertSalesInvoiceDetail(Nullable<int> invoiceID, Nullable<short> quantity, Nullable<int> productID, Nullable<int> specialOfferID, Nullable<decimal> unitPrice, Nullable<decimal> unitPriceDiscount, Nullable<decimal> lineTotal, Nullable<System.DateTime> modifiedDate, ObjectParameter invoiceDetailID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(short));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var specialOfferIDParameter = specialOfferID.HasValue ?
                new ObjectParameter("SpecialOfferID", specialOfferID) :
                new ObjectParameter("SpecialOfferID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var unitPriceDiscountParameter = unitPriceDiscount.HasValue ?
                new ObjectParameter("UnitPriceDiscount", unitPriceDiscount) :
                new ObjectParameter("UnitPriceDiscount", typeof(decimal));
    
            var lineTotalParameter = lineTotal.HasValue ?
                new ObjectParameter("LineTotal", lineTotal) :
                new ObjectParameter("LineTotal", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSalesInvoiceDetail", invoiceIDParameter, quantityParameter, productIDParameter, specialOfferIDParameter, unitPriceParameter, unitPriceDiscountParameter, lineTotalParameter, modifiedDateParameter, invoiceDetailID);
        }
    
        public virtual int InsertSalesInvoiceHeader(string invoiceNumber, Nullable<System.DateTime> invoiceDate, Nullable<System.DateTime> dueDate, Nullable<byte> status, string accountNumber, Nullable<int> saleOrderID, Nullable<int> salesPersonID, Nullable<int> territoryID, Nullable<int> billToAddressID, Nullable<int> shipToAddressID, Nullable<int> paymentMethodID, Nullable<decimal> subTotal, Nullable<decimal> taxAmt, Nullable<decimal> freight, Nullable<decimal> totalDue, string comment, Nullable<System.DateTime> modifiedDate, ObjectParameter invoiceID)
        {
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var saleOrderIDParameter = saleOrderID.HasValue ?
                new ObjectParameter("SaleOrderID", saleOrderID) :
                new ObjectParameter("SaleOrderID", typeof(int));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var billToAddressIDParameter = billToAddressID.HasValue ?
                new ObjectParameter("BillToAddressID", billToAddressID) :
                new ObjectParameter("BillToAddressID", typeof(int));
    
            var shipToAddressIDParameter = shipToAddressID.HasValue ?
                new ObjectParameter("ShipToAddressID", shipToAddressID) :
                new ObjectParameter("ShipToAddressID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var taxAmtParameter = taxAmt.HasValue ?
                new ObjectParameter("TaxAmt", taxAmt) :
                new ObjectParameter("TaxAmt", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var totalDueParameter = totalDue.HasValue ?
                new ObjectParameter("TotalDue", totalDue) :
                new ObjectParameter("TotalDue", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSalesInvoiceHeader", invoiceNumberParameter, invoiceDateParameter, dueDateParameter, statusParameter, accountNumberParameter, saleOrderIDParameter, salesPersonIDParameter, territoryIDParameter, billToAddressIDParameter, shipToAddressIDParameter, paymentMethodIDParameter, subTotalParameter, taxAmtParameter, freightParameter, totalDueParameter, commentParameter, modifiedDateParameter, invoiceID);
        }
    
        public virtual int InsertSalesOrderDetail(Nullable<int> salesOrderID, ObjectParameter salesOrderDetailID, string carrierTrackingNumber, Nullable<short> orderQty, Nullable<int> productID, Nullable<int> specialOfferID, Nullable<decimal> unitPrice, Nullable<decimal> unitPriceDiscount, Nullable<decimal> lineTotal, Nullable<System.DateTime> modifiedDate)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var carrierTrackingNumberParameter = carrierTrackingNumber != null ?
                new ObjectParameter("CarrierTrackingNumber", carrierTrackingNumber) :
                new ObjectParameter("CarrierTrackingNumber", typeof(string));
    
            var orderQtyParameter = orderQty.HasValue ?
                new ObjectParameter("OrderQty", orderQty) :
                new ObjectParameter("OrderQty", typeof(short));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var specialOfferIDParameter = specialOfferID.HasValue ?
                new ObjectParameter("SpecialOfferID", specialOfferID) :
                new ObjectParameter("SpecialOfferID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var unitPriceDiscountParameter = unitPriceDiscount.HasValue ?
                new ObjectParameter("UnitPriceDiscount", unitPriceDiscount) :
                new ObjectParameter("UnitPriceDiscount", typeof(decimal));
    
            var lineTotalParameter = lineTotal.HasValue ?
                new ObjectParameter("LineTotal", lineTotal) :
                new ObjectParameter("LineTotal", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSalesOrderDetail", salesOrderIDParameter, salesOrderDetailID, carrierTrackingNumberParameter, orderQtyParameter, productIDParameter, specialOfferIDParameter, unitPriceParameter, unitPriceDiscountParameter, lineTotalParameter, modifiedDateParameter);
        }
    
        public virtual int InsertSalesOrderHeader(Nullable<System.DateTime> orderDate, Nullable<System.DateTime> dueDate, Nullable<System.DateTime> shipDate, Nullable<byte> status, Nullable<bool> onlineOrderFlag, string salesOrderNumber, string purchaseOrderNumber, Nullable<int> customerID, Nullable<int> salesPersonID, Nullable<int> billToAddressID, Nullable<int> shipToAddressID, Nullable<int> shipMethodID, Nullable<int> paymentMethodID, Nullable<int> currencyRateID, Nullable<decimal> subTotal, Nullable<decimal> taxAmt, Nullable<decimal> freight, Nullable<decimal> totalDue, string comment, Nullable<System.DateTime> modifiedDate, ObjectParameter salesOrderID)
        {
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var shipDateParameter = shipDate.HasValue ?
                new ObjectParameter("ShipDate", shipDate) :
                new ObjectParameter("ShipDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var onlineOrderFlagParameter = onlineOrderFlag.HasValue ?
                new ObjectParameter("OnlineOrderFlag", onlineOrderFlag) :
                new ObjectParameter("OnlineOrderFlag", typeof(bool));
    
            var salesOrderNumberParameter = salesOrderNumber != null ?
                new ObjectParameter("SalesOrderNumber", salesOrderNumber) :
                new ObjectParameter("SalesOrderNumber", typeof(string));
    
            var purchaseOrderNumberParameter = purchaseOrderNumber != null ?
                new ObjectParameter("PurchaseOrderNumber", purchaseOrderNumber) :
                new ObjectParameter("PurchaseOrderNumber", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var billToAddressIDParameter = billToAddressID.HasValue ?
                new ObjectParameter("BillToAddressID", billToAddressID) :
                new ObjectParameter("BillToAddressID", typeof(int));
    
            var shipToAddressIDParameter = shipToAddressID.HasValue ?
                new ObjectParameter("ShipToAddressID", shipToAddressID) :
                new ObjectParameter("ShipToAddressID", typeof(int));
    
            var shipMethodIDParameter = shipMethodID.HasValue ?
                new ObjectParameter("ShipMethodID", shipMethodID) :
                new ObjectParameter("ShipMethodID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var currencyRateIDParameter = currencyRateID.HasValue ?
                new ObjectParameter("CurrencyRateID", currencyRateID) :
                new ObjectParameter("CurrencyRateID", typeof(int));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var taxAmtParameter = taxAmt.HasValue ?
                new ObjectParameter("TaxAmt", taxAmt) :
                new ObjectParameter("TaxAmt", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var totalDueParameter = totalDue.HasValue ?
                new ObjectParameter("TotalDue", totalDue) :
                new ObjectParameter("TotalDue", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSalesOrderHeader", orderDateParameter, dueDateParameter, shipDateParameter, statusParameter, onlineOrderFlagParameter, salesOrderNumberParameter, purchaseOrderNumberParameter, customerIDParameter, salesPersonIDParameter, billToAddressIDParameter, shipToAddressIDParameter, shipMethodIDParameter, paymentMethodIDParameter, currencyRateIDParameter, subTotalParameter, taxAmtParameter, freightParameter, totalDueParameter, commentParameter, modifiedDateParameter, salesOrderID);
        }
    
        public virtual int InsertSalesPerson(Nullable<int> salesPersonID, Nullable<int> territoryID, Nullable<decimal> salesQuota, Nullable<decimal> bonus, Nullable<decimal> commissionPct, Nullable<System.DateTime> modifiedDate)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var salesQuotaParameter = salesQuota.HasValue ?
                new ObjectParameter("SalesQuota", salesQuota) :
                new ObjectParameter("SalesQuota", typeof(decimal));
    
            var bonusParameter = bonus.HasValue ?
                new ObjectParameter("Bonus", bonus) :
                new ObjectParameter("Bonus", typeof(decimal));
    
            var commissionPctParameter = commissionPct.HasValue ?
                new ObjectParameter("CommissionPct", commissionPct) :
                new ObjectParameter("CommissionPct", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSalesPerson", salesPersonIDParameter, territoryIDParameter, salesQuotaParameter, bonusParameter, commissionPctParameter, modifiedDateParameter);
        }
    
        public virtual int InsertSalesPersonQuotaHistory(Nullable<int> salesPersonID, Nullable<System.DateTime> quotaDate, Nullable<decimal> salesQuota, Nullable<System.DateTime> modifiedDate)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var quotaDateParameter = quotaDate.HasValue ?
                new ObjectParameter("QuotaDate", quotaDate) :
                new ObjectParameter("QuotaDate", typeof(System.DateTime));
    
            var salesQuotaParameter = salesQuota.HasValue ?
                new ObjectParameter("SalesQuota", salesQuota) :
                new ObjectParameter("SalesQuota", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSalesPersonQuotaHistory", salesPersonIDParameter, quotaDateParameter, salesQuotaParameter, modifiedDateParameter);
        }
    
        public virtual int InsertSalesTaxRate(string stateProvinceID, Nullable<byte> taxType, Nullable<decimal> taxRate, string name, Nullable<System.DateTime> modifiedDate, ObjectParameter salesTaxRateID)
        {
            var stateProvinceIDParameter = stateProvinceID != null ?
                new ObjectParameter("StateProvinceID", stateProvinceID) :
                new ObjectParameter("StateProvinceID", typeof(string));
    
            var taxTypeParameter = taxType.HasValue ?
                new ObjectParameter("TaxType", taxType) :
                new ObjectParameter("TaxType", typeof(byte));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSalesTaxRate", stateProvinceIDParameter, taxTypeParameter, taxRateParameter, nameParameter, modifiedDateParameter, salesTaxRateID);
        }
    
        public virtual int InsertSalesTerritory(string name, string countryRegionCode, Nullable<System.DateTime> modifiedDate, ObjectParameter territoryID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var countryRegionCodeParameter = countryRegionCode != null ?
                new ObjectParameter("CountryRegionCode", countryRegionCode) :
                new ObjectParameter("CountryRegionCode", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSalesTerritory", nameParameter, countryRegionCodeParameter, modifiedDateParameter, territoryID);
        }
    
        public virtual int InsertSalesTerritoryHistory(Nullable<int> salesPersonID, Nullable<int> territoryID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> modifiedDate)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSalesTerritoryHistory", salesPersonIDParameter, territoryIDParameter, startDateParameter, endDateParameter, modifiedDateParameter);
        }
    
        public virtual int InsertShipMethod(string name, Nullable<decimal> shipBase, Nullable<decimal> shipRate, Nullable<System.DateTime> modifiedDate, ObjectParameter shipMethodID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var shipBaseParameter = shipBase.HasValue ?
                new ObjectParameter("ShipBase", shipBase) :
                new ObjectParameter("ShipBase", typeof(decimal));
    
            var shipRateParameter = shipRate.HasValue ?
                new ObjectParameter("ShipRate", shipRate) :
                new ObjectParameter("ShipRate", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertShipMethod", nameParameter, shipBaseParameter, shipRateParameter, modifiedDateParameter, shipMethodID);
        }
    
        public virtual int InsertSpecialOffer(string description, Nullable<decimal> discountPct, string type, string category, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> minQty, Nullable<int> maxQty, Nullable<System.DateTime> modifiedDate, ObjectParameter specialOfferID)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var discountPctParameter = discountPct.HasValue ?
                new ObjectParameter("DiscountPct", discountPct) :
                new ObjectParameter("DiscountPct", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var minQtyParameter = minQty.HasValue ?
                new ObjectParameter("MinQty", minQty) :
                new ObjectParameter("MinQty", typeof(int));
    
            var maxQtyParameter = maxQty.HasValue ?
                new ObjectParameter("MaxQty", maxQty) :
                new ObjectParameter("MaxQty", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSpecialOffer", descriptionParameter, discountPctParameter, typeParameter, categoryParameter, startDateParameter, endDateParameter, minQtyParameter, maxQtyParameter, modifiedDateParameter, specialOfferID);
        }
    
        public virtual int InsertSpecialOfferProduct(Nullable<int> specialOfferID, Nullable<int> productID, Nullable<System.DateTime> modifiedDate)
        {
            var specialOfferIDParameter = specialOfferID.HasValue ?
                new ObjectParameter("SpecialOfferID", specialOfferID) :
                new ObjectParameter("SpecialOfferID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSpecialOfferProduct", specialOfferIDParameter, productIDParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateAddress(ObjectParameter addressID, string addressLine1, string addressLine2, string city, string stateProvince, string postalCode, Nullable<System.DateTime> modifiedDate)
        {
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateProvinceParameter = stateProvince != null ?
                new ObjectParameter("StateProvince", stateProvince) :
                new ObjectParameter("StateProvince", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateAddress", addressID, addressLine1Parameter, addressLine2Parameter, cityParameter, stateProvinceParameter, postalCodeParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateCustomer(Nullable<int> customerID, Nullable<int> territoryID, Nullable<int> addressID, string accountNumber, Nullable<decimal> creditLimit, Nullable<short> deliveryDay, string customerType, string name, string contactName, string email, string phone, string secondPhone, string fax, Nullable<System.DateTime> modifiedDate, Nullable<int> billingAddressID, Nullable<bool> activeFlag)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var creditLimitParameter = creditLimit.HasValue ?
                new ObjectParameter("CreditLimit", creditLimit) :
                new ObjectParameter("CreditLimit", typeof(decimal));
    
            var deliveryDayParameter = deliveryDay.HasValue ?
                new ObjectParameter("DeliveryDay", deliveryDay) :
                new ObjectParameter("DeliveryDay", typeof(short));
    
            var customerTypeParameter = customerType != null ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var secondPhoneParameter = secondPhone != null ?
                new ObjectParameter("SecondPhone", secondPhone) :
                new ObjectParameter("SecondPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var activeFlagParameter = activeFlag.HasValue ?
                new ObjectParameter("ActiveFlag", activeFlag) :
                new ObjectParameter("ActiveFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateCustomer", customerIDParameter, territoryIDParameter, addressIDParameter, accountNumberParameter, creditLimitParameter, deliveryDayParameter, customerTypeParameter, nameParameter, contactNameParameter, emailParameter, phoneParameter, secondPhoneParameter, faxParameter, modifiedDateParameter, billingAddressIDParameter, activeFlagParameter);
        }
    
        public virtual int InsertUpdateEmployee(Nullable<int> employeeID, string firstName, string lastName, string middleName, string login, string workPhone, string homePhone, string cellPhone, Nullable<int> addressID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateEmployee", employeeIDParameter, firstNameParameter, lastNameParameter, middleNameParameter, loginParameter, workPhoneParameter, homePhoneParameter, cellPhoneParameter, addressIDParameter);
        }
    
        public virtual int InsertUpdateLocation(Nullable<int> locationID, Nullable<int> addressID, string name, Nullable<System.DateTime> modifiedDate)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateLocation", locationIDParameter, addressIDParameter, nameParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateOrderNumber(Nullable<int> id, Nullable<System.DateTime> today, Nullable<int> seqNumber, Nullable<int> orderType)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var todayParameter = today.HasValue ?
                new ObjectParameter("today", today) :
                new ObjectParameter("today", typeof(System.DateTime));
    
            var seqNumberParameter = seqNumber.HasValue ?
                new ObjectParameter("SeqNumber", seqNumber) :
                new ObjectParameter("SeqNumber", typeof(int));
    
            var orderTypeParameter = orderType.HasValue ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateOrderNumber", idParameter, todayParameter, seqNumberParameter, orderTypeParameter);
        }
    
        public virtual int InsertUpdatePayment(Nullable<int> paymentID, Nullable<int> orderID, string paymentType, Nullable<System.DateTime> paymentDate, Nullable<decimal> amount, string comments, Nullable<System.DateTime> modifiedDate)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdatePayment", paymentIDParameter, orderIDParameter, paymentTypeParameter, paymentDateParameter, amountParameter, commentsParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdatePaymentMethod(Nullable<int> paymentMethodID, string name)
        {
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdatePaymentMethod", paymentMethodIDParameter, nameParameter);
        }
    
        public virtual int InsertUpdateProduct(Nullable<int> productID, string name, string description, string productNumber, Nullable<bool> makeFlag, Nullable<bool> finishedGoodsFlag, string color, Nullable<short> safetyStockLevel, Nullable<short> reorderPoint, Nullable<decimal> standardCost, Nullable<decimal> listPrice, string size, string sizeUnitMeasureCode, string weightUnitMeasureCode, Nullable<decimal> weight, Nullable<int> daysToManufacture, string productLine, string @class, string style, Nullable<int> productSubcategoryID, Nullable<int> productModelID, Nullable<System.DateTime> sellStartDate, Nullable<System.DateTime> sellEndDate, Nullable<System.DateTime> discontinuedDate, Nullable<System.DateTime> modifiedDate, Nullable<int> primaryVendorId, Nullable<int> secondaryVendorId, Nullable<bool> activeFlag, string comments)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var productNumberParameter = productNumber != null ?
                new ObjectParameter("ProductNumber", productNumber) :
                new ObjectParameter("ProductNumber", typeof(string));
    
            var makeFlagParameter = makeFlag.HasValue ?
                new ObjectParameter("MakeFlag", makeFlag) :
                new ObjectParameter("MakeFlag", typeof(bool));
    
            var finishedGoodsFlagParameter = finishedGoodsFlag.HasValue ?
                new ObjectParameter("FinishedGoodsFlag", finishedGoodsFlag) :
                new ObjectParameter("FinishedGoodsFlag", typeof(bool));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var safetyStockLevelParameter = safetyStockLevel.HasValue ?
                new ObjectParameter("SafetyStockLevel", safetyStockLevel) :
                new ObjectParameter("SafetyStockLevel", typeof(short));
    
            var reorderPointParameter = reorderPoint.HasValue ?
                new ObjectParameter("ReorderPoint", reorderPoint) :
                new ObjectParameter("ReorderPoint", typeof(short));
    
            var standardCostParameter = standardCost.HasValue ?
                new ObjectParameter("StandardCost", standardCost) :
                new ObjectParameter("StandardCost", typeof(decimal));
    
            var listPriceParameter = listPrice.HasValue ?
                new ObjectParameter("ListPrice", listPrice) :
                new ObjectParameter("ListPrice", typeof(decimal));
    
            var sizeParameter = size != null ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(string));
    
            var sizeUnitMeasureCodeParameter = sizeUnitMeasureCode != null ?
                new ObjectParameter("SizeUnitMeasureCode", sizeUnitMeasureCode) :
                new ObjectParameter("SizeUnitMeasureCode", typeof(string));
    
            var weightUnitMeasureCodeParameter = weightUnitMeasureCode != null ?
                new ObjectParameter("WeightUnitMeasureCode", weightUnitMeasureCode) :
                new ObjectParameter("WeightUnitMeasureCode", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var daysToManufactureParameter = daysToManufacture.HasValue ?
                new ObjectParameter("DaysToManufacture", daysToManufacture) :
                new ObjectParameter("DaysToManufacture", typeof(int));
    
            var productLineParameter = productLine != null ?
                new ObjectParameter("ProductLine", productLine) :
                new ObjectParameter("ProductLine", typeof(string));
    
            var classParameter = @class != null ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(string));
    
            var styleParameter = style != null ?
                new ObjectParameter("Style", style) :
                new ObjectParameter("Style", typeof(string));
    
            var productSubcategoryIDParameter = productSubcategoryID.HasValue ?
                new ObjectParameter("ProductSubcategoryID", productSubcategoryID) :
                new ObjectParameter("ProductSubcategoryID", typeof(int));
    
            var productModelIDParameter = productModelID.HasValue ?
                new ObjectParameter("ProductModelID", productModelID) :
                new ObjectParameter("ProductModelID", typeof(int));
    
            var sellStartDateParameter = sellStartDate.HasValue ?
                new ObjectParameter("SellStartDate", sellStartDate) :
                new ObjectParameter("SellStartDate", typeof(System.DateTime));
    
            var sellEndDateParameter = sellEndDate.HasValue ?
                new ObjectParameter("SellEndDate", sellEndDate) :
                new ObjectParameter("SellEndDate", typeof(System.DateTime));
    
            var discontinuedDateParameter = discontinuedDate.HasValue ?
                new ObjectParameter("DiscontinuedDate", discontinuedDate) :
                new ObjectParameter("DiscontinuedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var primaryVendorIdParameter = primaryVendorId.HasValue ?
                new ObjectParameter("PrimaryVendorId", primaryVendorId) :
                new ObjectParameter("PrimaryVendorId", typeof(int));
    
            var secondaryVendorIdParameter = secondaryVendorId.HasValue ?
                new ObjectParameter("SecondaryVendorId", secondaryVendorId) :
                new ObjectParameter("SecondaryVendorId", typeof(int));
    
            var activeFlagParameter = activeFlag.HasValue ?
                new ObjectParameter("ActiveFlag", activeFlag) :
                new ObjectParameter("ActiveFlag", typeof(bool));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateProduct", productIDParameter, nameParameter, descriptionParameter, productNumberParameter, makeFlagParameter, finishedGoodsFlagParameter, colorParameter, safetyStockLevelParameter, reorderPointParameter, standardCostParameter, listPriceParameter, sizeParameter, sizeUnitMeasureCodeParameter, weightUnitMeasureCodeParameter, weightParameter, daysToManufactureParameter, productLineParameter, classParameter, styleParameter, productSubcategoryIDParameter, productModelIDParameter, sellStartDateParameter, sellEndDateParameter, discontinuedDateParameter, modifiedDateParameter, primaryVendorIdParameter, secondaryVendorIdParameter, activeFlagParameter, commentsParameter);
        }
    
        public virtual int InsertUpdateProductAdjustmentHistory(Nullable<int> iD, Nullable<int> productID, Nullable<int> adjustedQuantity, string reason, Nullable<System.DateTime> modifiedDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var adjustedQuantityParameter = adjustedQuantity.HasValue ?
                new ObjectParameter("AdjustedQuantity", adjustedQuantity) :
                new ObjectParameter("AdjustedQuantity", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateProductAdjustmentHistory", iDParameter, productIDParameter, adjustedQuantityParameter, reasonParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateProductCategory(Nullable<int> productCategoryID, string name, Nullable<System.DateTime> modifiedDate)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateProductCategory", productCategoryIDParameter, nameParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateProductCostHistory(Nullable<int> productID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> standardCost, Nullable<System.DateTime> modifiedDate)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var standardCostParameter = standardCost.HasValue ?
                new ObjectParameter("StandardCost", standardCost) :
                new ObjectParameter("StandardCost", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateProductCostHistory", productIDParameter, startDateParameter, endDateParameter, standardCostParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateProductInventory(Nullable<int> productID, Nullable<int> locationID, string shelf, Nullable<byte> bin, Nullable<short> quantity, Nullable<System.DateTime> modifiedDate)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var shelfParameter = shelf != null ?
                new ObjectParameter("Shelf", shelf) :
                new ObjectParameter("Shelf", typeof(string));
    
            var binParameter = bin.HasValue ?
                new ObjectParameter("Bin", bin) :
                new ObjectParameter("Bin", typeof(byte));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(short));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateProductInventory", productIDParameter, locationIDParameter, shelfParameter, binParameter, quantityParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateProductListPriceHistory(Nullable<int> productID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> listPrice, Nullable<System.DateTime> modifiedDate)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var listPriceParameter = listPrice.HasValue ?
                new ObjectParameter("ListPrice", listPrice) :
                new ObjectParameter("ListPrice", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateProductListPriceHistory", productIDParameter, startDateParameter, endDateParameter, listPriceParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateProductSubcategory(Nullable<int> productSubcategoryID, Nullable<int> productCategoryID, string name, Nullable<System.DateTime> modifiedDate)
        {
            var productSubcategoryIDParameter = productSubcategoryID.HasValue ?
                new ObjectParameter("ProductSubcategoryID", productSubcategoryID) :
                new ObjectParameter("ProductSubcategoryID", typeof(int));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateProductSubcategory", productSubcategoryIDParameter, productCategoryIDParameter, nameParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateProductVendor(Nullable<int> productID, Nullable<int> vendorID, Nullable<int> averageLeadTime, Nullable<decimal> standardPrice, Nullable<decimal> lastReceiptCost, Nullable<System.DateTime> lastReceiptDate, Nullable<int> minOrderQty, Nullable<int> maxOrderQty, Nullable<int> onOrderQty, string unitMeasureCode, Nullable<System.DateTime> modifiedDate)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var averageLeadTimeParameter = averageLeadTime.HasValue ?
                new ObjectParameter("AverageLeadTime", averageLeadTime) :
                new ObjectParameter("AverageLeadTime", typeof(int));
    
            var standardPriceParameter = standardPrice.HasValue ?
                new ObjectParameter("StandardPrice", standardPrice) :
                new ObjectParameter("StandardPrice", typeof(decimal));
    
            var lastReceiptCostParameter = lastReceiptCost.HasValue ?
                new ObjectParameter("LastReceiptCost", lastReceiptCost) :
                new ObjectParameter("LastReceiptCost", typeof(decimal));
    
            var lastReceiptDateParameter = lastReceiptDate.HasValue ?
                new ObjectParameter("LastReceiptDate", lastReceiptDate) :
                new ObjectParameter("LastReceiptDate", typeof(System.DateTime));
    
            var minOrderQtyParameter = minOrderQty.HasValue ?
                new ObjectParameter("MinOrderQty", minOrderQty) :
                new ObjectParameter("MinOrderQty", typeof(int));
    
            var maxOrderQtyParameter = maxOrderQty.HasValue ?
                new ObjectParameter("MaxOrderQty", maxOrderQty) :
                new ObjectParameter("MaxOrderQty", typeof(int));
    
            var onOrderQtyParameter = onOrderQty.HasValue ?
                new ObjectParameter("OnOrderQty", onOrderQty) :
                new ObjectParameter("OnOrderQty", typeof(int));
    
            var unitMeasureCodeParameter = unitMeasureCode != null ?
                new ObjectParameter("UnitMeasureCode", unitMeasureCode) :
                new ObjectParameter("UnitMeasureCode", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateProductVendor", productIDParameter, vendorIDParameter, averageLeadTimeParameter, standardPriceParameter, lastReceiptCostParameter, lastReceiptDateParameter, minOrderQtyParameter, maxOrderQtyParameter, onOrderQtyParameter, unitMeasureCodeParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdatePurchaseInvoiceDetail(Nullable<int> invoiceID, Nullable<int> invoiceDetailID, Nullable<int> productID, Nullable<decimal> unitPrice, Nullable<long> quantity, Nullable<System.DateTime> modifiedDate)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var invoiceDetailIDParameter = invoiceDetailID.HasValue ?
                new ObjectParameter("InvoiceDetailID", invoiceDetailID) :
                new ObjectParameter("InvoiceDetailID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(long));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdatePurchaseInvoiceDetail", invoiceIDParameter, invoiceDetailIDParameter, productIDParameter, unitPriceParameter, quantityParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdatePurchaseInvoiceHeader(Nullable<int> invoiceID, Nullable<byte> invoiceNumber, Nullable<byte> status, Nullable<int> employeeID, Nullable<int> vendorID, Nullable<System.DateTime> invoiceDate, Nullable<decimal> subTotal, Nullable<decimal> taxAmt, Nullable<decimal> freight, Nullable<decimal> totalDue, Nullable<System.DateTime> modifiedDate)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var invoiceNumberParameter = invoiceNumber.HasValue ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(byte));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var taxAmtParameter = taxAmt.HasValue ?
                new ObjectParameter("TaxAmt", taxAmt) :
                new ObjectParameter("TaxAmt", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var totalDueParameter = totalDue.HasValue ?
                new ObjectParameter("TotalDue", totalDue) :
                new ObjectParameter("TotalDue", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdatePurchaseInvoiceHeader", invoiceIDParameter, invoiceNumberParameter, statusParameter, employeeIDParameter, vendorIDParameter, invoiceDateParameter, subTotalParameter, taxAmtParameter, freightParameter, totalDueParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdatePurchaseOrderHeader(Nullable<int> purchaseOrderID, Nullable<byte> revisionNumber, Nullable<byte> status, Nullable<int> employeeID, Nullable<int> vendorID, Nullable<int> shipMethodID, Nullable<System.DateTime> orderDate, Nullable<System.DateTime> shipDate, Nullable<decimal> subTotal, Nullable<decimal> taxAmt, Nullable<decimal> freight, Nullable<decimal> totalDue, Nullable<System.DateTime> modifiedDate)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var revisionNumberParameter = revisionNumber.HasValue ?
                new ObjectParameter("RevisionNumber", revisionNumber) :
                new ObjectParameter("RevisionNumber", typeof(byte));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var shipMethodIDParameter = shipMethodID.HasValue ?
                new ObjectParameter("ShipMethodID", shipMethodID) :
                new ObjectParameter("ShipMethodID", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var shipDateParameter = shipDate.HasValue ?
                new ObjectParameter("ShipDate", shipDate) :
                new ObjectParameter("ShipDate", typeof(System.DateTime));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var taxAmtParameter = taxAmt.HasValue ?
                new ObjectParameter("TaxAmt", taxAmt) :
                new ObjectParameter("TaxAmt", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var totalDueParameter = totalDue.HasValue ?
                new ObjectParameter("TotalDue", totalDue) :
                new ObjectParameter("TotalDue", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdatePurchaseOrderHeader", purchaseOrderIDParameter, revisionNumberParameter, statusParameter, employeeIDParameter, vendorIDParameter, shipMethodIDParameter, orderDateParameter, shipDateParameter, subTotalParameter, taxAmtParameter, freightParameter, totalDueParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateSalesInvoiceDetail(Nullable<int> invoiceDetailID, Nullable<int> invoiceID, Nullable<short> quantity, Nullable<int> productID, Nullable<int> specialOfferID, Nullable<decimal> unitPrice, Nullable<decimal> unitPriceDiscount, Nullable<decimal> lineTotal, Nullable<System.DateTime> modifiedDate)
        {
            var invoiceDetailIDParameter = invoiceDetailID.HasValue ?
                new ObjectParameter("InvoiceDetailID", invoiceDetailID) :
                new ObjectParameter("InvoiceDetailID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(short));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var specialOfferIDParameter = specialOfferID.HasValue ?
                new ObjectParameter("SpecialOfferID", specialOfferID) :
                new ObjectParameter("SpecialOfferID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var unitPriceDiscountParameter = unitPriceDiscount.HasValue ?
                new ObjectParameter("UnitPriceDiscount", unitPriceDiscount) :
                new ObjectParameter("UnitPriceDiscount", typeof(decimal));
    
            var lineTotalParameter = lineTotal.HasValue ?
                new ObjectParameter("LineTotal", lineTotal) :
                new ObjectParameter("LineTotal", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateSalesInvoiceDetail", invoiceDetailIDParameter, invoiceIDParameter, quantityParameter, productIDParameter, specialOfferIDParameter, unitPriceParameter, unitPriceDiscountParameter, lineTotalParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateSalesInvoiceHeader(Nullable<int> invoiceID, string invoiceNumber, Nullable<System.DateTime> invoiceDate, Nullable<System.DateTime> dueDate, Nullable<byte> status, string accountNumber, Nullable<int> saleOrderID, Nullable<int> salesPersonID, Nullable<int> territoryID, Nullable<int> billToAddressID, Nullable<int> shipToAddressID, Nullable<int> paymentMethodID, Nullable<decimal> subTotal, Nullable<decimal> taxAmt, Nullable<decimal> freight, Nullable<decimal> totalDue, string comment, Nullable<System.DateTime> modifiedDate)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var saleOrderIDParameter = saleOrderID.HasValue ?
                new ObjectParameter("SaleOrderID", saleOrderID) :
                new ObjectParameter("SaleOrderID", typeof(int));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var billToAddressIDParameter = billToAddressID.HasValue ?
                new ObjectParameter("BillToAddressID", billToAddressID) :
                new ObjectParameter("BillToAddressID", typeof(int));
    
            var shipToAddressIDParameter = shipToAddressID.HasValue ?
                new ObjectParameter("ShipToAddressID", shipToAddressID) :
                new ObjectParameter("ShipToAddressID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var taxAmtParameter = taxAmt.HasValue ?
                new ObjectParameter("TaxAmt", taxAmt) :
                new ObjectParameter("TaxAmt", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var totalDueParameter = totalDue.HasValue ?
                new ObjectParameter("TotalDue", totalDue) :
                new ObjectParameter("TotalDue", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateSalesInvoiceHeader", invoiceIDParameter, invoiceNumberParameter, invoiceDateParameter, dueDateParameter, statusParameter, accountNumberParameter, saleOrderIDParameter, salesPersonIDParameter, territoryIDParameter, billToAddressIDParameter, shipToAddressIDParameter, paymentMethodIDParameter, subTotalParameter, taxAmtParameter, freightParameter, totalDueParameter, commentParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateSalesOrderHeader(Nullable<int> salesOrderID, Nullable<byte> revisionNumber, Nullable<System.DateTime> orderDate, Nullable<System.DateTime> dueDate, Nullable<System.DateTime> shipDate, Nullable<byte> status, Nullable<bool> onlineOrderFlag, string salesOrderNumber, string purchaseOrderNumber, string accountNumber, Nullable<int> customerID, Nullable<int> salesPersonID, Nullable<int> territoryID, Nullable<int> billToAddressID, Nullable<int> shipToAddressID, Nullable<int> shipMethodID, Nullable<int> paymentMethodID, Nullable<int> currencyRateID, Nullable<decimal> subTotal, Nullable<decimal> taxAmt, Nullable<decimal> freight, Nullable<decimal> totalDue, string comment, Nullable<System.DateTime> modifiedDate)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var revisionNumberParameter = revisionNumber.HasValue ?
                new ObjectParameter("RevisionNumber", revisionNumber) :
                new ObjectParameter("RevisionNumber", typeof(byte));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var shipDateParameter = shipDate.HasValue ?
                new ObjectParameter("ShipDate", shipDate) :
                new ObjectParameter("ShipDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var onlineOrderFlagParameter = onlineOrderFlag.HasValue ?
                new ObjectParameter("OnlineOrderFlag", onlineOrderFlag) :
                new ObjectParameter("OnlineOrderFlag", typeof(bool));
    
            var salesOrderNumberParameter = salesOrderNumber != null ?
                new ObjectParameter("SalesOrderNumber", salesOrderNumber) :
                new ObjectParameter("SalesOrderNumber", typeof(string));
    
            var purchaseOrderNumberParameter = purchaseOrderNumber != null ?
                new ObjectParameter("PurchaseOrderNumber", purchaseOrderNumber) :
                new ObjectParameter("PurchaseOrderNumber", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var billToAddressIDParameter = billToAddressID.HasValue ?
                new ObjectParameter("BillToAddressID", billToAddressID) :
                new ObjectParameter("BillToAddressID", typeof(int));
    
            var shipToAddressIDParameter = shipToAddressID.HasValue ?
                new ObjectParameter("ShipToAddressID", shipToAddressID) :
                new ObjectParameter("ShipToAddressID", typeof(int));
    
            var shipMethodIDParameter = shipMethodID.HasValue ?
                new ObjectParameter("ShipMethodID", shipMethodID) :
                new ObjectParameter("ShipMethodID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var currencyRateIDParameter = currencyRateID.HasValue ?
                new ObjectParameter("CurrencyRateID", currencyRateID) :
                new ObjectParameter("CurrencyRateID", typeof(int));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var taxAmtParameter = taxAmt.HasValue ?
                new ObjectParameter("TaxAmt", taxAmt) :
                new ObjectParameter("TaxAmt", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var totalDueParameter = totalDue.HasValue ?
                new ObjectParameter("TotalDue", totalDue) :
                new ObjectParameter("TotalDue", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateSalesOrderHeader", salesOrderIDParameter, revisionNumberParameter, orderDateParameter, dueDateParameter, shipDateParameter, statusParameter, onlineOrderFlagParameter, salesOrderNumberParameter, purchaseOrderNumberParameter, accountNumberParameter, customerIDParameter, salesPersonIDParameter, territoryIDParameter, billToAddressIDParameter, shipToAddressIDParameter, shipMethodIDParameter, paymentMethodIDParameter, currencyRateIDParameter, subTotalParameter, taxAmtParameter, freightParameter, totalDueParameter, commentParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateSalesPerson(Nullable<int> salesPersonID, Nullable<int> territoryID, Nullable<decimal> salesQuota, Nullable<decimal> bonus, Nullable<decimal> commissionPct, Nullable<System.DateTime> modifiedDate)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var salesQuotaParameter = salesQuota.HasValue ?
                new ObjectParameter("SalesQuota", salesQuota) :
                new ObjectParameter("SalesQuota", typeof(decimal));
    
            var bonusParameter = bonus.HasValue ?
                new ObjectParameter("Bonus", bonus) :
                new ObjectParameter("Bonus", typeof(decimal));
    
            var commissionPctParameter = commissionPct.HasValue ?
                new ObjectParameter("CommissionPct", commissionPct) :
                new ObjectParameter("CommissionPct", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateSalesPerson", salesPersonIDParameter, territoryIDParameter, salesQuotaParameter, bonusParameter, commissionPctParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateSalesPersonQuotaHistory(Nullable<int> salesPersonID, Nullable<System.DateTime> quotaDate, Nullable<decimal> salesQuota, Nullable<System.DateTime> modifiedDate)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var quotaDateParameter = quotaDate.HasValue ?
                new ObjectParameter("QuotaDate", quotaDate) :
                new ObjectParameter("QuotaDate", typeof(System.DateTime));
    
            var salesQuotaParameter = salesQuota.HasValue ?
                new ObjectParameter("SalesQuota", salesQuota) :
                new ObjectParameter("SalesQuota", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateSalesPersonQuotaHistory", salesPersonIDParameter, quotaDateParameter, salesQuotaParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateSalesTaxRate(Nullable<int> salesTaxRateID, string stateProvinceID, Nullable<byte> taxType, Nullable<decimal> taxRate, string name, Nullable<System.DateTime> modifiedDate)
        {
            var salesTaxRateIDParameter = salesTaxRateID.HasValue ?
                new ObjectParameter("SalesTaxRateID", salesTaxRateID) :
                new ObjectParameter("SalesTaxRateID", typeof(int));
    
            var stateProvinceIDParameter = stateProvinceID != null ?
                new ObjectParameter("StateProvinceID", stateProvinceID) :
                new ObjectParameter("StateProvinceID", typeof(string));
    
            var taxTypeParameter = taxType.HasValue ?
                new ObjectParameter("TaxType", taxType) :
                new ObjectParameter("TaxType", typeof(byte));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateSalesTaxRate", salesTaxRateIDParameter, stateProvinceIDParameter, taxTypeParameter, taxRateParameter, nameParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateSalesTerritory(Nullable<int> territoryID, string name, string countryRegionCode, Nullable<System.DateTime> modifiedDate)
        {
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var countryRegionCodeParameter = countryRegionCode != null ?
                new ObjectParameter("CountryRegionCode", countryRegionCode) :
                new ObjectParameter("CountryRegionCode", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateSalesTerritory", territoryIDParameter, nameParameter, countryRegionCodeParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateSalesTerritoryHistory(Nullable<int> iD, Nullable<int> salesPersonID, Nullable<int> territoryID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> modifiedDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateSalesTerritoryHistory", iDParameter, salesPersonIDParameter, territoryIDParameter, startDateParameter, endDateParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateShipMethod(Nullable<int> shipMethodID, string name, Nullable<decimal> shipBase, Nullable<decimal> shipRate, Nullable<System.DateTime> modifiedDate)
        {
            var shipMethodIDParameter = shipMethodID.HasValue ?
                new ObjectParameter("ShipMethodID", shipMethodID) :
                new ObjectParameter("ShipMethodID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var shipBaseParameter = shipBase.HasValue ?
                new ObjectParameter("ShipBase", shipBase) :
                new ObjectParameter("ShipBase", typeof(decimal));
    
            var shipRateParameter = shipRate.HasValue ?
                new ObjectParameter("ShipRate", shipRate) :
                new ObjectParameter("ShipRate", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateShipMethod", shipMethodIDParameter, nameParameter, shipBaseParameter, shipRateParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateSpecialOffer(Nullable<int> specialOfferID, string description, Nullable<decimal> discountPct, string type, string category, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> minQty, Nullable<int> maxQty, Nullable<System.DateTime> modifiedDate)
        {
            var specialOfferIDParameter = specialOfferID.HasValue ?
                new ObjectParameter("SpecialOfferID", specialOfferID) :
                new ObjectParameter("SpecialOfferID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var discountPctParameter = discountPct.HasValue ?
                new ObjectParameter("DiscountPct", discountPct) :
                new ObjectParameter("DiscountPct", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var minQtyParameter = minQty.HasValue ?
                new ObjectParameter("MinQty", minQty) :
                new ObjectParameter("MinQty", typeof(int));
    
            var maxQtyParameter = maxQty.HasValue ?
                new ObjectParameter("MaxQty", maxQty) :
                new ObjectParameter("MaxQty", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateSpecialOffer", specialOfferIDParameter, descriptionParameter, discountPctParameter, typeParameter, categoryParameter, startDateParameter, endDateParameter, minQtyParameter, maxQtyParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateSpecialOfferProduct(Nullable<int> specialOfferID, Nullable<int> productID, Nullable<System.DateTime> modifiedDate)
        {
            var specialOfferIDParameter = specialOfferID.HasValue ?
                new ObjectParameter("SpecialOfferID", specialOfferID) :
                new ObjectParameter("SpecialOfferID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateSpecialOfferProduct", specialOfferIDParameter, productIDParameter, modifiedDateParameter);
        }
    
        public virtual int InsertUpdateUser(Nullable<int> iD, Nullable<int> employeeID, string userName, string password)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateUser", iDParameter, employeeIDParameter, userNameParameter, passwordParameter);
        }
    
        public virtual int InsertUpdateVendor(Nullable<int> vendorID, string accountNumber, string name, string contactName, Nullable<byte> creditRating, Nullable<bool> preferredVendorStatus, string phone, string fax, string email, Nullable<bool> activeFlag, Nullable<System.DateTime> modifiedDate, Nullable<int> addressID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var creditRatingParameter = creditRating.HasValue ?
                new ObjectParameter("CreditRating", creditRating) :
                new ObjectParameter("CreditRating", typeof(byte));
    
            var preferredVendorStatusParameter = preferredVendorStatus.HasValue ?
                new ObjectParameter("PreferredVendorStatus", preferredVendorStatus) :
                new ObjectParameter("PreferredVendorStatus", typeof(bool));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var activeFlagParameter = activeFlag.HasValue ?
                new ObjectParameter("ActiveFlag", activeFlag) :
                new ObjectParameter("ActiveFlag", typeof(bool));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUpdateVendor", vendorIDParameter, accountNumberParameter, nameParameter, contactNameParameter, creditRatingParameter, preferredVendorStatusParameter, phoneParameter, faxParameter, emailParameter, activeFlagParameter, modifiedDateParameter, addressIDParameter);
        }
    
        public virtual int InsertUser(Nullable<int> employeeID, string userName, string password, ObjectParameter iD)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUser", employeeIDParameter, userNameParameter, passwordParameter, iD);
        }
    
        public virtual int InsertVendor(string accountNumber, string name, string contactName, Nullable<byte> creditRating, Nullable<bool> preferredVendorStatus, string phone, string fax, string email, Nullable<bool> activeFlag, Nullable<System.DateTime> modifiedDate, ObjectParameter vendorID, Nullable<int> addressID, string altPhone, string terms)
        {
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var creditRatingParameter = creditRating.HasValue ?
                new ObjectParameter("CreditRating", creditRating) :
                new ObjectParameter("CreditRating", typeof(byte));
    
            var preferredVendorStatusParameter = preferredVendorStatus.HasValue ?
                new ObjectParameter("PreferredVendorStatus", preferredVendorStatus) :
                new ObjectParameter("PreferredVendorStatus", typeof(bool));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var activeFlagParameter = activeFlag.HasValue ?
                new ObjectParameter("ActiveFlag", activeFlag) :
                new ObjectParameter("ActiveFlag", typeof(bool));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var altPhoneParameter = altPhone != null ?
                new ObjectParameter("AltPhone", altPhone) :
                new ObjectParameter("AltPhone", typeof(string));
    
            var termsParameter = terms != null ?
                new ObjectParameter("Terms", terms) :
                new ObjectParameter("Terms", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertVendor", accountNumberParameter, nameParameter, contactNameParameter, creditRatingParameter, preferredVendorStatusParameter, phoneParameter, faxParameter, emailParameter, activeFlagParameter, modifiedDateParameter, vendorID, addressIDParameter, altPhoneParameter, termsParameter);
        }
    
        public virtual ObjectResult<SelectAddress_Result> SelectAddress(Nullable<int> addressID)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAddress_Result>("SelectAddress", addressIDParameter);
        }
    
        public virtual ObjectResult<SelectAddressesAll_Result> SelectAddressesAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAddressesAll_Result>("SelectAddressesAll");
        }
    
        public virtual int SelectAddressesDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectAddressesDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectAddressesPaged_Result> SelectAddressesPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAddressesPaged_Result>("SelectAddressesPaged");
        }
    
        public virtual ObjectResult<SelectCustomer_Result> SelectCustomer(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectCustomer_Result>("SelectCustomer", customerIDParameter);
        }
    
        public virtual ObjectResult<SelectCustomerByName_Result> SelectCustomerByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectCustomerByName_Result>("SelectCustomerByName", nameParameter);
        }
    
        public virtual ObjectResult<SelectCustomerExists_Result> SelectCustomerExists(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectCustomerExists_Result>("SelectCustomerExists", nameParameter);
        }
    
        public virtual ObjectResult<SelectCustomersAll_Result> SelectCustomersAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectCustomersAll_Result>("SelectCustomersAll");
        }
    
        public virtual int SelectCustomersDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectCustomersDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectCustomersPaged_Result> SelectCustomersPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectCustomersPaged_Result>("SelectCustomersPaged");
        }
    
        public virtual ObjectResult<SelectEmployee_Result> SelectEmployee(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectEmployee_Result>("SelectEmployee", employeeIDParameter);
        }
    
        public virtual ObjectResult<SelectEmployeesAll_Result> SelectEmployeesAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectEmployeesAll_Result>("SelectEmployeesAll");
        }
    
        public virtual int SelectEmployeesDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectEmployeesDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectEmployeesPaged_Result> SelectEmployeesPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectEmployeesPaged_Result>("SelectEmployeesPaged");
        }
    
        public virtual ObjectResult<SelectLocation_Result> SelectLocation(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectLocation_Result>("SelectLocation", locationIDParameter);
        }
    
        public virtual ObjectResult<SelectLocationByName_Result> SelectLocationByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectLocationByName_Result>("SelectLocationByName", nameParameter);
        }
    
        public virtual ObjectResult<SelectLocationsAll_Result> SelectLocationsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectLocationsAll_Result>("SelectLocationsAll");
        }
    
        public virtual int SelectLocationsDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectLocationsDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectLocationsPaged_Result> SelectLocationsPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectLocationsPaged_Result>("SelectLocationsPaged");
        }
    
        public virtual ObjectResult<SelectOrderNumber_Result> SelectOrderNumber(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectOrderNumber_Result>("SelectOrderNumber", idParameter);
        }
    
        public virtual ObjectResult<SelectOrderNumbersAll_Result> SelectOrderNumbersAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectOrderNumbersAll_Result>("SelectOrderNumbersAll");
        }
    
        public virtual int SelectOrderNumbersDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectOrderNumbersDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectOrderNumbersPaged_Result> SelectOrderNumbersPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectOrderNumbersPaged_Result>("SelectOrderNumbersPaged");
        }
    
        public virtual ObjectResult<SelectPayment_Result> SelectPayment(Nullable<int> paymentID)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPayment_Result>("SelectPayment", paymentIDParameter);
        }
    
        public virtual ObjectResult<SelectPaymentMethod_Result> SelectPaymentMethod(Nullable<int> paymentMethodID)
        {
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPaymentMethod_Result>("SelectPaymentMethod", paymentMethodIDParameter);
        }
    
        public virtual ObjectResult<SelectPaymentMethodByName_Result> SelectPaymentMethodByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPaymentMethodByName_Result>("SelectPaymentMethodByName", nameParameter);
        }
    
        public virtual ObjectResult<SelectPaymentMethodsAll_Result> SelectPaymentMethodsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPaymentMethodsAll_Result>("SelectPaymentMethodsAll");
        }
    
        public virtual int SelectPaymentMethodsDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectPaymentMethodsDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectPaymentMethodsPaged_Result> SelectPaymentMethodsPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPaymentMethodsPaged_Result>("SelectPaymentMethodsPaged");
        }
    
        public virtual ObjectResult<SelectPaymentsAll_Result> SelectPaymentsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPaymentsAll_Result>("SelectPaymentsAll");
        }
    
        public virtual int SelectPaymentsDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectPaymentsDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectPaymentsPaged_Result> SelectPaymentsPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPaymentsPaged_Result>("SelectPaymentsPaged");
        }
    
        public virtual ObjectResult<SelectProduct_Result> SelectProduct(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProduct_Result>("SelectProduct", productIDParameter);
        }
    
        public virtual ObjectResult<SelectProductAdjustmentHistoriesAll_Result> SelectProductAdjustmentHistoriesAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductAdjustmentHistoriesAll_Result>("SelectProductAdjustmentHistoriesAll");
        }
    
        public virtual int SelectProductAdjustmentHistoriesDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectProductAdjustmentHistoriesDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectProductAdjustmentHistoriesPaged_Result> SelectProductAdjustmentHistoriesPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductAdjustmentHistoriesPaged_Result>("SelectProductAdjustmentHistoriesPaged");
        }
    
        public virtual ObjectResult<SelectProductAdjustmentHistory_Result> SelectProductAdjustmentHistory(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductAdjustmentHistory_Result>("SelectProductAdjustmentHistory", iDParameter);
        }
    
        public virtual ObjectResult<SelectProductCategoriesAll_Result> SelectProductCategoriesAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductCategoriesAll_Result>("SelectProductCategoriesAll");
        }
    
        public virtual int SelectProductCategoriesDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectProductCategoriesDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectProductCategoriesPaged_Result> SelectProductCategoriesPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductCategoriesPaged_Result>("SelectProductCategoriesPaged");
        }
    
        public virtual ObjectResult<SelectProductCategory_Result> SelectProductCategory(Nullable<int> productCategoryID)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductCategory_Result>("SelectProductCategory", productCategoryIDParameter);
        }
    
        public virtual ObjectResult<SelectProductCategoryExists_Result> SelectProductCategoryExists(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductCategoryExists_Result>("SelectProductCategoryExists", nameParameter);
        }
    
        public virtual ObjectResult<SelectProductCostHistoriesAll_Result> SelectProductCostHistoriesAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductCostHistoriesAll_Result>("SelectProductCostHistoriesAll");
        }
    
        public virtual int SelectProductCostHistoriesDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectProductCostHistoriesDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectProductCostHistoriesPaged_Result> SelectProductCostHistoriesPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductCostHistoriesPaged_Result>("SelectProductCostHistoriesPaged");
        }
    
        public virtual ObjectResult<SelectProductCostHistory_Result> SelectProductCostHistory(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductCostHistory_Result>("SelectProductCostHistory", iDParameter);
        }
    
        public virtual ObjectResult<SelectProductExists_Result> SelectProductExists(string name, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductExists_Result>("SelectProductExists", nameParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<SelectProductInventoriesAll_Result> SelectProductInventoriesAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductInventoriesAll_Result>("SelectProductInventoriesAll");
        }
    
        public virtual int SelectProductInventoriesDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectProductInventoriesDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectProductInventoriesPaged_Result> SelectProductInventoriesPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductInventoriesPaged_Result>("SelectProductInventoriesPaged");
        }
    
        public virtual ObjectResult<SelectProductInventory_Result> SelectProductInventory(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductInventory_Result>("SelectProductInventory", productIDParameter);
        }
    
        public virtual ObjectResult<SelectProductListPriceHistoriesAll_Result> SelectProductListPriceHistoriesAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductListPriceHistoriesAll_Result>("SelectProductListPriceHistoriesAll");
        }
    
        public virtual int SelectProductListPriceHistoriesDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectProductListPriceHistoriesDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectProductListPriceHistoriesPaged_Result> SelectProductListPriceHistoriesPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductListPriceHistoriesPaged_Result>("SelectProductListPriceHistoriesPaged");
        }
    
        public virtual ObjectResult<SelectProductListPriceHistory_Result> SelectProductListPriceHistory(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductListPriceHistory_Result>("SelectProductListPriceHistory", iDParameter);
        }
    
        public virtual ObjectResult<SelectProductsAll_Result> SelectProductsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductsAll_Result>("SelectProductsAll");
        }
    
        public virtual int SelectProductsDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectProductsDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectProductsLike_Result> SelectProductsLike(string likeCondition)
        {
            var likeConditionParameter = likeCondition != null ?
                new ObjectParameter("LikeCondition", likeCondition) :
                new ObjectParameter("LikeCondition", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductsLike_Result>("SelectProductsLike", likeConditionParameter);
        }
    
        public virtual ObjectResult<SelectProductsPaged_Result> SelectProductsPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductsPaged_Result>("SelectProductsPaged");
        }
    
        public virtual ObjectResult<SelectProductsPicker_Result> SelectProductsPicker()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductsPicker_Result>("SelectProductsPicker");
        }
    
        public virtual ObjectResult<SelectProductsSubCategoryPicker_Result> SelectProductsSubCategoryPicker(Nullable<int> productCategoryid, Nullable<int> productSubCategoryid, string productName)
        {
            var productCategoryidParameter = productCategoryid.HasValue ?
                new ObjectParameter("productCategoryid", productCategoryid) :
                new ObjectParameter("productCategoryid", typeof(int));
    
            var productSubCategoryidParameter = productSubCategoryid.HasValue ?
                new ObjectParameter("productSubCategoryid", productSubCategoryid) :
                new ObjectParameter("productSubCategoryid", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductsSubCategoryPicker_Result>("SelectProductsSubCategoryPicker", productCategoryidParameter, productSubCategoryidParameter, productNameParameter);
        }
    
        public virtual ObjectResult<SelectProductSubcategoriesAll_Result> SelectProductSubcategoriesAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductSubcategoriesAll_Result>("SelectProductSubcategoriesAll");
        }
    
        public virtual int SelectProductSubcategoriesDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectProductSubcategoriesDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectProductSubcategoriesPaged_Result> SelectProductSubcategoriesPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductSubcategoriesPaged_Result>("SelectProductSubcategoriesPaged");
        }
    
        public virtual ObjectResult<SelectProductSubcategory_Result> SelectProductSubcategory(Nullable<int> productSubcategoryID)
        {
            var productSubcategoryIDParameter = productSubcategoryID.HasValue ?
                new ObjectParameter("ProductSubcategoryID", productSubcategoryID) :
                new ObjectParameter("ProductSubcategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductSubcategory_Result>("SelectProductSubcategory", productSubcategoryIDParameter);
        }
    
        public virtual ObjectResult<SelectProductSubcategoryExists_Result> SelectProductSubcategoryExists(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductSubcategoryExists_Result>("SelectProductSubcategoryExists", nameParameter);
        }
    
        public virtual ObjectResult<SelectProductVendor_Result> SelectProductVendor(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductVendor_Result>("SelectProductVendor", productIDParameter);
        }
    
        public virtual ObjectResult<SelectProductVendorsAll_Result> SelectProductVendorsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductVendorsAll_Result>("SelectProductVendorsAll");
        }
    
        public virtual int SelectProductVendorsDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectProductVendorsDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectProductVendorsPaged_Result> SelectProductVendorsPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectProductVendorsPaged_Result>("SelectProductVendorsPaged");
        }
    
        public virtual ObjectResult<SelectPurchaseInvoiceDetail_Result> SelectPurchaseInvoiceDetail(Nullable<int> invoiceDetailID)
        {
            var invoiceDetailIDParameter = invoiceDetailID.HasValue ?
                new ObjectParameter("InvoiceDetailID", invoiceDetailID) :
                new ObjectParameter("InvoiceDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPurchaseInvoiceDetail_Result>("SelectPurchaseInvoiceDetail", invoiceDetailIDParameter);
        }
    
        public virtual ObjectResult<SelectPurchaseInvoiceDetailsAll_Result> SelectPurchaseInvoiceDetailsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPurchaseInvoiceDetailsAll_Result>("SelectPurchaseInvoiceDetailsAll");
        }
    
        public virtual int SelectPurchaseInvoiceDetailsDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectPurchaseInvoiceDetailsDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual int SelectPurchaseInvoiceDetailsGrid(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectPurchaseInvoiceDetailsGrid", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectPurchaseInvoiceDetailsPaged_Result> SelectPurchaseInvoiceDetailsPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPurchaseInvoiceDetailsPaged_Result>("SelectPurchaseInvoiceDetailsPaged");
        }
    
        public virtual ObjectResult<SelectPurchaseInvoiceHeader_Result> SelectPurchaseInvoiceHeader(Nullable<int> invoiceID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPurchaseInvoiceHeader_Result>("SelectPurchaseInvoiceHeader", invoiceIDParameter);
        }
    
        public virtual ObjectResult<SelectPurchaseInvoiceHeadersAll_Result> SelectPurchaseInvoiceHeadersAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPurchaseInvoiceHeadersAll_Result>("SelectPurchaseInvoiceHeadersAll");
        }
    
        public virtual int SelectPurchaseInvoiceHeadersDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectPurchaseInvoiceHeadersDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectPurchaseInvoiceHeadersPaged_Result> SelectPurchaseInvoiceHeadersPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPurchaseInvoiceHeadersPaged_Result>("SelectPurchaseInvoiceHeadersPaged");
        }
    
        public virtual ObjectResult<SelectPurchaseOrderDetail_Result> SelectPurchaseOrderDetail(Nullable<int> purchaseOrderID)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPurchaseOrderDetail_Result>("SelectPurchaseOrderDetail", purchaseOrderIDParameter);
        }
    
        public virtual ObjectResult<SelectPurchaseOrderDetailByOrderID_Result> SelectPurchaseOrderDetailByOrderID(Nullable<int> purchaseOrderlID)
        {
            var purchaseOrderlIDParameter = purchaseOrderlID.HasValue ?
                new ObjectParameter("PurchaseOrderlID", purchaseOrderlID) :
                new ObjectParameter("PurchaseOrderlID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPurchaseOrderDetailByOrderID_Result>("SelectPurchaseOrderDetailByOrderID", purchaseOrderlIDParameter);
        }
    
        public virtual ObjectResult<SelectPurchaseOrderDetailsAll_Result> SelectPurchaseOrderDetailsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPurchaseOrderDetailsAll_Result>("SelectPurchaseOrderDetailsAll");
        }
    
        public virtual int SelectPurchaseOrderDetailsDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectPurchaseOrderDetailsDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectPurchaseOrderDetailsPaged_Result> SelectPurchaseOrderDetailsPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPurchaseOrderDetailsPaged_Result>("SelectPurchaseOrderDetailsPaged");
        }
    
        public virtual ObjectResult<SelectPurchaseOrderHeader_Result> SelectPurchaseOrderHeader(Nullable<int> purchaseOrderID)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPurchaseOrderHeader_Result>("SelectPurchaseOrderHeader", purchaseOrderIDParameter);
        }
    
        public virtual ObjectResult<SelectPurchaseOrderHeadersAll_Result> SelectPurchaseOrderHeadersAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPurchaseOrderHeadersAll_Result>("SelectPurchaseOrderHeadersAll");
        }
    
        public virtual int SelectPurchaseOrderHeadersDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectPurchaseOrderHeadersDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectPurchaseOrderHeadersPaged_Result> SelectPurchaseOrderHeadersPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPurchaseOrderHeadersPaged_Result>("SelectPurchaseOrderHeadersPaged");
        }
    
        public virtual ObjectResult<SelectSalesInvoiceDetail_Result> SelectSalesInvoiceDetail(Nullable<int> invoiceDetailID)
        {
            var invoiceDetailIDParameter = invoiceDetailID.HasValue ?
                new ObjectParameter("InvoiceDetailID", invoiceDetailID) :
                new ObjectParameter("InvoiceDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesInvoiceDetail_Result>("SelectSalesInvoiceDetail", invoiceDetailIDParameter);
        }
    
        public virtual ObjectResult<SelectSalesInvoiceDetailsAll_Result> SelectSalesInvoiceDetailsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesInvoiceDetailsAll_Result>("SelectSalesInvoiceDetailsAll");
        }
    
        public virtual int SelectSalesInvoiceDetailsDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectSalesInvoiceDetailsDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectSalesInvoiceDetailsPaged_Result> SelectSalesInvoiceDetailsPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesInvoiceDetailsPaged_Result>("SelectSalesInvoiceDetailsPaged");
        }
    
        public virtual ObjectResult<SelectSalesInvoiceHeader_Result> SelectSalesInvoiceHeader(Nullable<int> invoiceID)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesInvoiceHeader_Result>("SelectSalesInvoiceHeader", invoiceIDParameter);
        }
    
        public virtual ObjectResult<SelectSalesInvoiceHeadersAll_Result> SelectSalesInvoiceHeadersAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesInvoiceHeadersAll_Result>("SelectSalesInvoiceHeadersAll");
        }
    
        public virtual int SelectSalesInvoiceHeadersDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectSalesInvoiceHeadersDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectSalesInvoiceHeadersPaged_Result> SelectSalesInvoiceHeadersPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesInvoiceHeadersPaged_Result>("SelectSalesInvoiceHeadersPaged");
        }
    
        public virtual ObjectResult<SelectSalesOrderDetail_Result> SelectSalesOrderDetail(Nullable<int> salesOrderID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesOrderDetail_Result>("SelectSalesOrderDetail", salesOrderIDParameter);
        }
    
        public virtual ObjectResult<SelectSalesOrderDetailsAll_Result> SelectSalesOrderDetailsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesOrderDetailsAll_Result>("SelectSalesOrderDetailsAll");
        }
    
        public virtual int SelectSalesOrderDetailsDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectSalesOrderDetailsDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectSalesOrderDetailsPaged_Result> SelectSalesOrderDetailsPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesOrderDetailsPaged_Result>("SelectSalesOrderDetailsPaged");
        }
    
        public virtual ObjectResult<SelectSalesOrderHeader_Result> SelectSalesOrderHeader(Nullable<int> salesOrderID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesOrderHeader_Result>("SelectSalesOrderHeader", salesOrderIDParameter);
        }
    
        public virtual ObjectResult<SelectSalesOrderHeadersAll_Result> SelectSalesOrderHeadersAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesOrderHeadersAll_Result>("SelectSalesOrderHeadersAll");
        }
    
        public virtual int SelectSalesOrderHeadersDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectSalesOrderHeadersDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectSalesOrderHeadersPaged_Result> SelectSalesOrderHeadersPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesOrderHeadersPaged_Result>("SelectSalesOrderHeadersPaged");
        }
    
        public virtual ObjectResult<SelectSalesPerson_Result> SelectSalesPerson(Nullable<int> salesPersonID)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesPerson_Result>("SelectSalesPerson", salesPersonIDParameter);
        }
    
        public virtual ObjectResult<SelectSalesPersonQuotaHistoriesAll_Result> SelectSalesPersonQuotaHistoriesAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesPersonQuotaHistoriesAll_Result>("SelectSalesPersonQuotaHistoriesAll");
        }
    
        public virtual int SelectSalesPersonQuotaHistoriesDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectSalesPersonQuotaHistoriesDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectSalesPersonQuotaHistoriesPaged_Result> SelectSalesPersonQuotaHistoriesPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesPersonQuotaHistoriesPaged_Result>("SelectSalesPersonQuotaHistoriesPaged");
        }
    
        public virtual ObjectResult<SelectSalesPersonQuotaHistory_Result> SelectSalesPersonQuotaHistory(Nullable<int> salesPersonID)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesPersonQuotaHistory_Result>("SelectSalesPersonQuotaHistory", salesPersonIDParameter);
        }
    
        public virtual ObjectResult<SelectSalesPersonsAll_Result> SelectSalesPersonsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesPersonsAll_Result>("SelectSalesPersonsAll");
        }
    
        public virtual int SelectSalesPersonsDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectSalesPersonsDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectSalesPersonsPaged_Result> SelectSalesPersonsPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesPersonsPaged_Result>("SelectSalesPersonsPaged");
        }
    
        public virtual ObjectResult<SelectSalesTaxRate_Result> SelectSalesTaxRate(Nullable<int> salesTaxRateID)
        {
            var salesTaxRateIDParameter = salesTaxRateID.HasValue ?
                new ObjectParameter("SalesTaxRateID", salesTaxRateID) :
                new ObjectParameter("SalesTaxRateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesTaxRate_Result>("SelectSalesTaxRate", salesTaxRateIDParameter);
        }
    
        public virtual ObjectResult<SelectSalesTaxRatesAll_Result> SelectSalesTaxRatesAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesTaxRatesAll_Result>("SelectSalesTaxRatesAll");
        }
    
        public virtual int SelectSalesTaxRatesDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectSalesTaxRatesDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectSalesTaxRatesPaged_Result> SelectSalesTaxRatesPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesTaxRatesPaged_Result>("SelectSalesTaxRatesPaged");
        }
    
        public virtual ObjectResult<SelectSalesTerritoriesAll_Result> SelectSalesTerritoriesAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesTerritoriesAll_Result>("SelectSalesTerritoriesAll");
        }
    
        public virtual int SelectSalesTerritoriesDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectSalesTerritoriesDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectSalesTerritoriesPaged_Result> SelectSalesTerritoriesPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesTerritoriesPaged_Result>("SelectSalesTerritoriesPaged");
        }
    
        public virtual ObjectResult<SelectSalesTerritory_Result> SelectSalesTerritory(Nullable<int> territoryID)
        {
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesTerritory_Result>("SelectSalesTerritory", territoryIDParameter);
        }
    
        public virtual ObjectResult<SelectSalesTerritoryAll_Result> SelectSalesTerritoryAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesTerritoryAll_Result>("SelectSalesTerritoryAll");
        }
    
        public virtual ObjectResult<SelectSalesTerritoryHistoriesAll_Result> SelectSalesTerritoryHistoriesAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesTerritoryHistoriesAll_Result>("SelectSalesTerritoryHistoriesAll");
        }
    
        public virtual int SelectSalesTerritoryHistoriesDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectSalesTerritoryHistoriesDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectSalesTerritoryHistoriesPaged_Result> SelectSalesTerritoryHistoriesPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesTerritoryHistoriesPaged_Result>("SelectSalesTerritoryHistoriesPaged");
        }
    
        public virtual ObjectResult<SelectSalesTerritoryHistory_Result> SelectSalesTerritoryHistory(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSalesTerritoryHistory_Result>("SelectSalesTerritoryHistory", iDParameter);
        }
    
        public virtual ObjectResult<SelectShipMethod_Result> SelectShipMethod(Nullable<int> shipMethodID)
        {
            var shipMethodIDParameter = shipMethodID.HasValue ?
                new ObjectParameter("ShipMethodID", shipMethodID) :
                new ObjectParameter("ShipMethodID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectShipMethod_Result>("SelectShipMethod", shipMethodIDParameter);
        }
    
        public virtual ObjectResult<SelectShipMethodsAll_Result> SelectShipMethodsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectShipMethodsAll_Result>("SelectShipMethodsAll");
        }
    
        public virtual int SelectShipMethodsDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectShipMethodsDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectShipMethodsPaged_Result> SelectShipMethodsPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectShipMethodsPaged_Result>("SelectShipMethodsPaged");
        }
    
        public virtual ObjectResult<SelectSpecialOffer_Result> SelectSpecialOffer(Nullable<int> specialOfferID)
        {
            var specialOfferIDParameter = specialOfferID.HasValue ?
                new ObjectParameter("SpecialOfferID", specialOfferID) :
                new ObjectParameter("SpecialOfferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSpecialOffer_Result>("SelectSpecialOffer", specialOfferIDParameter);
        }
    
        public virtual ObjectResult<SelectSpecialOfferProduct_Result> SelectSpecialOfferProduct(Nullable<int> specialOfferID)
        {
            var specialOfferIDParameter = specialOfferID.HasValue ?
                new ObjectParameter("SpecialOfferID", specialOfferID) :
                new ObjectParameter("SpecialOfferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSpecialOfferProduct_Result>("SelectSpecialOfferProduct", specialOfferIDParameter);
        }
    
        public virtual ObjectResult<SelectSpecialOfferProductsAll_Result> SelectSpecialOfferProductsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSpecialOfferProductsAll_Result>("SelectSpecialOfferProductsAll");
        }
    
        public virtual int SelectSpecialOfferProductsDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectSpecialOfferProductsDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectSpecialOfferProductsPaged_Result> SelectSpecialOfferProductsPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSpecialOfferProductsPaged_Result>("SelectSpecialOfferProductsPaged");
        }
    
        public virtual ObjectResult<SelectSpecialOffersAll_Result> SelectSpecialOffersAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSpecialOffersAll_Result>("SelectSpecialOffersAll");
        }
    
        public virtual int SelectSpecialOffersDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectSpecialOffersDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectSpecialOffersPaged_Result> SelectSpecialOffersPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectSpecialOffersPaged_Result>("SelectSpecialOffersPaged");
        }
    
        public virtual ObjectResult<SelectUser_Result> SelectUser(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectUser_Result>("SelectUser", iDParameter);
        }
    
        public virtual ObjectResult<SelectUsersAll_Result> SelectUsersAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectUsersAll_Result>("SelectUsersAll");
        }
    
        public virtual int SelectUsersDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectUsersDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectUsersPaged_Result> SelectUsersPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectUsersPaged_Result>("SelectUsersPaged");
        }
    
        public virtual ObjectResult<SelectVendor_Result> SelectVendor(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectVendor_Result>("SelectVendor", vendorIDParameter);
        }
    
        public virtual ObjectResult<SelectVendorExists_Result> SelectVendorExists(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectVendorExists_Result>("SelectVendorExists", nameParameter);
        }
    
        public virtual ObjectResult<SelectVendorsAll_Result> SelectVendorsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectVendorsAll_Result>("SelectVendorsAll");
        }
    
        public virtual int SelectVendorsDynamic(string whereCondition, string orderByExpression)
        {
            var whereConditionParameter = whereCondition != null ?
                new ObjectParameter("WhereCondition", whereCondition) :
                new ObjectParameter("WhereCondition", typeof(string));
    
            var orderByExpressionParameter = orderByExpression != null ?
                new ObjectParameter("OrderByExpression", orderByExpression) :
                new ObjectParameter("OrderByExpression", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectVendorsDynamic", whereConditionParameter, orderByExpressionParameter);
        }
    
        public virtual ObjectResult<SelectVendorsPaged_Result> SelectVendorsPaged()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectVendorsPaged_Result>("SelectVendorsPaged");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<string> sp_generate_inserts(string table_name, string target_table, Nullable<bool> include_column_list, string from, Nullable<bool> include_timestamp, Nullable<bool> debug_mode, string owner, Nullable<bool> ommit_images, Nullable<bool> ommit_identity, Nullable<int> top, string cols_to_include, string cols_to_exclude, Nullable<bool> disable_constraints, Nullable<bool> ommit_computed_cols)
        {
            var table_nameParameter = table_name != null ?
                new ObjectParameter("table_name", table_name) :
                new ObjectParameter("table_name", typeof(string));
    
            var target_tableParameter = target_table != null ?
                new ObjectParameter("target_table", target_table) :
                new ObjectParameter("target_table", typeof(string));
    
            var include_column_listParameter = include_column_list.HasValue ?
                new ObjectParameter("include_column_list", include_column_list) :
                new ObjectParameter("include_column_list", typeof(bool));
    
            var fromParameter = from != null ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(string));
    
            var include_timestampParameter = include_timestamp.HasValue ?
                new ObjectParameter("include_timestamp", include_timestamp) :
                new ObjectParameter("include_timestamp", typeof(bool));
    
            var debug_modeParameter = debug_mode.HasValue ?
                new ObjectParameter("debug_mode", debug_mode) :
                new ObjectParameter("debug_mode", typeof(bool));
    
            var ownerParameter = owner != null ?
                new ObjectParameter("owner", owner) :
                new ObjectParameter("owner", typeof(string));
    
            var ommit_imagesParameter = ommit_images.HasValue ?
                new ObjectParameter("ommit_images", ommit_images) :
                new ObjectParameter("ommit_images", typeof(bool));
    
            var ommit_identityParameter = ommit_identity.HasValue ?
                new ObjectParameter("ommit_identity", ommit_identity) :
                new ObjectParameter("ommit_identity", typeof(bool));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var cols_to_includeParameter = cols_to_include != null ?
                new ObjectParameter("cols_to_include", cols_to_include) :
                new ObjectParameter("cols_to_include", typeof(string));
    
            var cols_to_excludeParameter = cols_to_exclude != null ?
                new ObjectParameter("cols_to_exclude", cols_to_exclude) :
                new ObjectParameter("cols_to_exclude", typeof(string));
    
            var disable_constraintsParameter = disable_constraints.HasValue ?
                new ObjectParameter("disable_constraints", disable_constraints) :
                new ObjectParameter("disable_constraints", typeof(bool));
    
            var ommit_computed_colsParameter = ommit_computed_cols.HasValue ?
                new ObjectParameter("ommit_computed_cols", ommit_computed_cols) :
                new ObjectParameter("ommit_computed_cols", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_generate_inserts", table_nameParameter, target_tableParameter, include_column_listParameter, fromParameter, include_timestampParameter, debug_modeParameter, ownerParameter, ommit_imagesParameter, ommit_identityParameter, topParameter, cols_to_includeParameter, cols_to_excludeParameter, disable_constraintsParameter, ommit_computed_colsParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateAddress(Nullable<int> addressID, string addressLine1, string addressLine2, string city, string stateProvince, string postalCode, Nullable<System.DateTime> modifiedDate)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateProvinceParameter = stateProvince != null ?
                new ObjectParameter("StateProvince", stateProvince) :
                new ObjectParameter("StateProvince", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAddress", addressIDParameter, addressLine1Parameter, addressLine2Parameter, cityParameter, stateProvinceParameter, postalCodeParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateCustomer(Nullable<int> customerID, Nullable<int> territoryID, Nullable<int> addressID, string accountNumber, Nullable<decimal> creditLimit, Nullable<short> deliveryDay, string customerType, string name, string contactName, string email, string phone, string secondPhone, string fax, Nullable<System.DateTime> modifiedDate, Nullable<int> billingAddressID, Nullable<bool> activeFlag)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var creditLimitParameter = creditLimit.HasValue ?
                new ObjectParameter("CreditLimit", creditLimit) :
                new ObjectParameter("CreditLimit", typeof(decimal));
    
            var deliveryDayParameter = deliveryDay.HasValue ?
                new ObjectParameter("DeliveryDay", deliveryDay) :
                new ObjectParameter("DeliveryDay", typeof(short));
    
            var customerTypeParameter = customerType != null ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var secondPhoneParameter = secondPhone != null ?
                new ObjectParameter("SecondPhone", secondPhone) :
                new ObjectParameter("SecondPhone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var billingAddressIDParameter = billingAddressID.HasValue ?
                new ObjectParameter("BillingAddressID", billingAddressID) :
                new ObjectParameter("BillingAddressID", typeof(int));
    
            var activeFlagParameter = activeFlag.HasValue ?
                new ObjectParameter("ActiveFlag", activeFlag) :
                new ObjectParameter("ActiveFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomer", customerIDParameter, territoryIDParameter, addressIDParameter, accountNumberParameter, creditLimitParameter, deliveryDayParameter, customerTypeParameter, nameParameter, contactNameParameter, emailParameter, phoneParameter, secondPhoneParameter, faxParameter, modifiedDateParameter, billingAddressIDParameter, activeFlagParameter);
        }
    
        public virtual int UpdateEmployee(Nullable<int> employeeID, string firstName, string lastName, string middleName, string login, Nullable<int> addressID, string workPhone, string homePhone, string cellPhone)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("WorkPhone", workPhone) :
                new ObjectParameter("WorkPhone", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("HomePhone", homePhone) :
                new ObjectParameter("HomePhone", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployee", employeeIDParameter, firstNameParameter, lastNameParameter, middleNameParameter, loginParameter, addressIDParameter, workPhoneParameter, homePhoneParameter, cellPhoneParameter);
        }
    
        public virtual int UpdateInventory(Nullable<int> productID, Nullable<short> quantity, Nullable<System.DateTime> modifiedDate)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(short));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateInventory", productIDParameter, quantityParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateLocation(Nullable<int> locationID, Nullable<int> addressID, string name, Nullable<System.DateTime> modifiedDate)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLocation", locationIDParameter, addressIDParameter, nameParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateOrderNumber(Nullable<int> id, Nullable<System.DateTime> today, Nullable<int> seqNumber, Nullable<int> orderType)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var todayParameter = today.HasValue ?
                new ObjectParameter("today", today) :
                new ObjectParameter("today", typeof(System.DateTime));
    
            var seqNumberParameter = seqNumber.HasValue ?
                new ObjectParameter("SeqNumber", seqNumber) :
                new ObjectParameter("SeqNumber", typeof(int));
    
            var orderTypeParameter = orderType.HasValue ?
                new ObjectParameter("OrderType", orderType) :
                new ObjectParameter("OrderType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOrderNumber", idParameter, todayParameter, seqNumberParameter, orderTypeParameter);
        }
    
        public virtual int UpdatePayment(Nullable<int> paymentID, Nullable<int> invoiceID, string paymentType, Nullable<System.DateTime> paymentDate, Nullable<decimal> amount, string comments, Nullable<System.DateTime> modifiedDate, string checkNumber)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var checkNumberParameter = checkNumber != null ?
                new ObjectParameter("CheckNumber", checkNumber) :
                new ObjectParameter("CheckNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePayment", paymentIDParameter, invoiceIDParameter, paymentTypeParameter, paymentDateParameter, amountParameter, commentsParameter, modifiedDateParameter, checkNumberParameter);
        }
    
        public virtual int UpdatePaymentMethod(Nullable<int> paymentMethodID, string name)
        {
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePaymentMethod", paymentMethodIDParameter, nameParameter);
        }
    
        public virtual int UpdateProduct(Nullable<int> productID, string name, string description, string productNumber, Nullable<bool> makeFlag, Nullable<bool> finishedGoodsFlag, string color, Nullable<short> safetyStockLevel, Nullable<short> reorderPoint, Nullable<decimal> standardCost, Nullable<decimal> listPrice, string size, string sizeUnitMeasureCode, string weightUnitMeasureCode, Nullable<decimal> weight, Nullable<int> daysToManufacture, string productLine, string @class, string style, Nullable<int> productSubcategoryID, Nullable<int> productModelID, Nullable<System.DateTime> sellStartDate, Nullable<System.DateTime> sellEndDate, Nullable<System.DateTime> discontinuedDate, Nullable<System.DateTime> modifiedDate, Nullable<int> primaryVendorId, Nullable<int> secondaryVendorId, Nullable<bool> activeFlag, string comments)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var productNumberParameter = productNumber != null ?
                new ObjectParameter("ProductNumber", productNumber) :
                new ObjectParameter("ProductNumber", typeof(string));
    
            var makeFlagParameter = makeFlag.HasValue ?
                new ObjectParameter("MakeFlag", makeFlag) :
                new ObjectParameter("MakeFlag", typeof(bool));
    
            var finishedGoodsFlagParameter = finishedGoodsFlag.HasValue ?
                new ObjectParameter("FinishedGoodsFlag", finishedGoodsFlag) :
                new ObjectParameter("FinishedGoodsFlag", typeof(bool));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var safetyStockLevelParameter = safetyStockLevel.HasValue ?
                new ObjectParameter("SafetyStockLevel", safetyStockLevel) :
                new ObjectParameter("SafetyStockLevel", typeof(short));
    
            var reorderPointParameter = reorderPoint.HasValue ?
                new ObjectParameter("ReorderPoint", reorderPoint) :
                new ObjectParameter("ReorderPoint", typeof(short));
    
            var standardCostParameter = standardCost.HasValue ?
                new ObjectParameter("StandardCost", standardCost) :
                new ObjectParameter("StandardCost", typeof(decimal));
    
            var listPriceParameter = listPrice.HasValue ?
                new ObjectParameter("ListPrice", listPrice) :
                new ObjectParameter("ListPrice", typeof(decimal));
    
            var sizeParameter = size != null ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(string));
    
            var sizeUnitMeasureCodeParameter = sizeUnitMeasureCode != null ?
                new ObjectParameter("SizeUnitMeasureCode", sizeUnitMeasureCode) :
                new ObjectParameter("SizeUnitMeasureCode", typeof(string));
    
            var weightUnitMeasureCodeParameter = weightUnitMeasureCode != null ?
                new ObjectParameter("WeightUnitMeasureCode", weightUnitMeasureCode) :
                new ObjectParameter("WeightUnitMeasureCode", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var daysToManufactureParameter = daysToManufacture.HasValue ?
                new ObjectParameter("DaysToManufacture", daysToManufacture) :
                new ObjectParameter("DaysToManufacture", typeof(int));
    
            var productLineParameter = productLine != null ?
                new ObjectParameter("ProductLine", productLine) :
                new ObjectParameter("ProductLine", typeof(string));
    
            var classParameter = @class != null ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(string));
    
            var styleParameter = style != null ?
                new ObjectParameter("Style", style) :
                new ObjectParameter("Style", typeof(string));
    
            var productSubcategoryIDParameter = productSubcategoryID.HasValue ?
                new ObjectParameter("ProductSubcategoryID", productSubcategoryID) :
                new ObjectParameter("ProductSubcategoryID", typeof(int));
    
            var productModelIDParameter = productModelID.HasValue ?
                new ObjectParameter("ProductModelID", productModelID) :
                new ObjectParameter("ProductModelID", typeof(int));
    
            var sellStartDateParameter = sellStartDate.HasValue ?
                new ObjectParameter("SellStartDate", sellStartDate) :
                new ObjectParameter("SellStartDate", typeof(System.DateTime));
    
            var sellEndDateParameter = sellEndDate.HasValue ?
                new ObjectParameter("SellEndDate", sellEndDate) :
                new ObjectParameter("SellEndDate", typeof(System.DateTime));
    
            var discontinuedDateParameter = discontinuedDate.HasValue ?
                new ObjectParameter("DiscontinuedDate", discontinuedDate) :
                new ObjectParameter("DiscontinuedDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var primaryVendorIdParameter = primaryVendorId.HasValue ?
                new ObjectParameter("PrimaryVendorId", primaryVendorId) :
                new ObjectParameter("PrimaryVendorId", typeof(int));
    
            var secondaryVendorIdParameter = secondaryVendorId.HasValue ?
                new ObjectParameter("SecondaryVendorId", secondaryVendorId) :
                new ObjectParameter("SecondaryVendorId", typeof(int));
    
            var activeFlagParameter = activeFlag.HasValue ?
                new ObjectParameter("ActiveFlag", activeFlag) :
                new ObjectParameter("ActiveFlag", typeof(bool));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProduct", productIDParameter, nameParameter, descriptionParameter, productNumberParameter, makeFlagParameter, finishedGoodsFlagParameter, colorParameter, safetyStockLevelParameter, reorderPointParameter, standardCostParameter, listPriceParameter, sizeParameter, sizeUnitMeasureCodeParameter, weightUnitMeasureCodeParameter, weightParameter, daysToManufactureParameter, productLineParameter, classParameter, styleParameter, productSubcategoryIDParameter, productModelIDParameter, sellStartDateParameter, sellEndDateParameter, discontinuedDateParameter, modifiedDateParameter, primaryVendorIdParameter, secondaryVendorIdParameter, activeFlagParameter, commentsParameter);
        }
    
        public virtual int UpdateProductAdjustmentHistory(Nullable<int> iD, Nullable<int> productID, Nullable<int> adjustedQuantity, string reason, Nullable<System.DateTime> modifiedDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var adjustedQuantityParameter = adjustedQuantity.HasValue ?
                new ObjectParameter("AdjustedQuantity", adjustedQuantity) :
                new ObjectParameter("AdjustedQuantity", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProductAdjustmentHistory", iDParameter, productIDParameter, adjustedQuantityParameter, reasonParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateProductCategory(Nullable<int> productCategoryID, string name, Nullable<System.DateTime> modifiedDate)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProductCategory", productCategoryIDParameter, nameParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateProductCostHistory(Nullable<int> iD, Nullable<int> productID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> standardCost, Nullable<System.DateTime> modifiedDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var standardCostParameter = standardCost.HasValue ?
                new ObjectParameter("StandardCost", standardCost) :
                new ObjectParameter("StandardCost", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProductCostHistory", iDParameter, productIDParameter, startDateParameter, endDateParameter, standardCostParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateProductInventory(Nullable<int> productID, Nullable<int> locationID, string shelf, Nullable<byte> bin, Nullable<short> quantity, Nullable<System.DateTime> modifiedDate)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var shelfParameter = shelf != null ?
                new ObjectParameter("Shelf", shelf) :
                new ObjectParameter("Shelf", typeof(string));
    
            var binParameter = bin.HasValue ?
                new ObjectParameter("Bin", bin) :
                new ObjectParameter("Bin", typeof(byte));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(short));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProductInventory", productIDParameter, locationIDParameter, shelfParameter, binParameter, quantityParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateProductListPriceHistory(Nullable<int> productID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> listPrice, Nullable<System.DateTime> modifiedDate)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var listPriceParameter = listPrice.HasValue ?
                new ObjectParameter("ListPrice", listPrice) :
                new ObjectParameter("ListPrice", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProductListPriceHistory", productIDParameter, startDateParameter, endDateParameter, listPriceParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateProductSubcategory(Nullable<int> productSubcategoryID, Nullable<int> productCategoryID, string name, Nullable<System.DateTime> modifiedDate)
        {
            var productSubcategoryIDParameter = productSubcategoryID.HasValue ?
                new ObjectParameter("ProductSubcategoryID", productSubcategoryID) :
                new ObjectParameter("ProductSubcategoryID", typeof(int));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProductSubcategory", productSubcategoryIDParameter, productCategoryIDParameter, nameParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateProductVendor(Nullable<int> productID, Nullable<int> vendorID, Nullable<int> averageLeadTime, Nullable<decimal> standardPrice, Nullable<decimal> lastReceiptCost, Nullable<System.DateTime> lastReceiptDate, Nullable<int> minOrderQty, Nullable<int> maxOrderQty, Nullable<int> onOrderQty, string unitMeasureCode, Nullable<System.DateTime> modifiedDate)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var averageLeadTimeParameter = averageLeadTime.HasValue ?
                new ObjectParameter("AverageLeadTime", averageLeadTime) :
                new ObjectParameter("AverageLeadTime", typeof(int));
    
            var standardPriceParameter = standardPrice.HasValue ?
                new ObjectParameter("StandardPrice", standardPrice) :
                new ObjectParameter("StandardPrice", typeof(decimal));
    
            var lastReceiptCostParameter = lastReceiptCost.HasValue ?
                new ObjectParameter("LastReceiptCost", lastReceiptCost) :
                new ObjectParameter("LastReceiptCost", typeof(decimal));
    
            var lastReceiptDateParameter = lastReceiptDate.HasValue ?
                new ObjectParameter("LastReceiptDate", lastReceiptDate) :
                new ObjectParameter("LastReceiptDate", typeof(System.DateTime));
    
            var minOrderQtyParameter = minOrderQty.HasValue ?
                new ObjectParameter("MinOrderQty", minOrderQty) :
                new ObjectParameter("MinOrderQty", typeof(int));
    
            var maxOrderQtyParameter = maxOrderQty.HasValue ?
                new ObjectParameter("MaxOrderQty", maxOrderQty) :
                new ObjectParameter("MaxOrderQty", typeof(int));
    
            var onOrderQtyParameter = onOrderQty.HasValue ?
                new ObjectParameter("OnOrderQty", onOrderQty) :
                new ObjectParameter("OnOrderQty", typeof(int));
    
            var unitMeasureCodeParameter = unitMeasureCode != null ?
                new ObjectParameter("UnitMeasureCode", unitMeasureCode) :
                new ObjectParameter("UnitMeasureCode", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProductVendor", productIDParameter, vendorIDParameter, averageLeadTimeParameter, standardPriceParameter, lastReceiptCostParameter, lastReceiptDateParameter, minOrderQtyParameter, maxOrderQtyParameter, onOrderQtyParameter, unitMeasureCodeParameter, modifiedDateParameter);
        }
    
        public virtual int UpdatePurchaseInvoiceDetail(Nullable<int> invoiceID, Nullable<int> invoiceDetailID, Nullable<int> productID, Nullable<decimal> unitPrice, Nullable<long> quantity, Nullable<System.DateTime> modifiedDate)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var invoiceDetailIDParameter = invoiceDetailID.HasValue ?
                new ObjectParameter("InvoiceDetailID", invoiceDetailID) :
                new ObjectParameter("InvoiceDetailID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(long));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePurchaseInvoiceDetail", invoiceIDParameter, invoiceDetailIDParameter, productIDParameter, unitPriceParameter, quantityParameter, modifiedDateParameter);
        }
    
        public virtual int UpdatePurchaseInvoiceHeader(Nullable<int> invoiceID, string invoiceNumber, Nullable<byte> status, Nullable<int> employeeID, Nullable<int> purchaseOrderID, Nullable<int> vendorID, Nullable<System.DateTime> invoiceDate, Nullable<decimal> subTotal, Nullable<decimal> taxAmt, Nullable<decimal> freight, Nullable<decimal> totalDue, Nullable<System.DateTime> modifiedDate)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var taxAmtParameter = taxAmt.HasValue ?
                new ObjectParameter("TaxAmt", taxAmt) :
                new ObjectParameter("TaxAmt", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var totalDueParameter = totalDue.HasValue ?
                new ObjectParameter("TotalDue", totalDue) :
                new ObjectParameter("TotalDue", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePurchaseInvoiceHeader", invoiceIDParameter, invoiceNumberParameter, statusParameter, employeeIDParameter, purchaseOrderIDParameter, vendorIDParameter, invoiceDateParameter, subTotalParameter, taxAmtParameter, freightParameter, totalDueParameter, modifiedDateParameter);
        }
    
        public virtual int UpdatePurchaseOrderDetail(Nullable<int> purchaseOrderID, Nullable<int> purchaseOrderDetailID, Nullable<System.DateTime> dueDate, Nullable<short> orderQty, Nullable<int> productID, Nullable<decimal> unitPrice, Nullable<double> numberOfCases, Nullable<int> unitPerCase, Nullable<long> receivedQty, Nullable<long> rejectedQty, Nullable<long> stockedQty, Nullable<System.DateTime> modifiedDate)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var purchaseOrderDetailIDParameter = purchaseOrderDetailID.HasValue ?
                new ObjectParameter("PurchaseOrderDetailID", purchaseOrderDetailID) :
                new ObjectParameter("PurchaseOrderDetailID", typeof(int));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var orderQtyParameter = orderQty.HasValue ?
                new ObjectParameter("OrderQty", orderQty) :
                new ObjectParameter("OrderQty", typeof(short));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var numberOfCasesParameter = numberOfCases.HasValue ?
                new ObjectParameter("NumberOfCases", numberOfCases) :
                new ObjectParameter("NumberOfCases", typeof(double));
    
            var unitPerCaseParameter = unitPerCase.HasValue ?
                new ObjectParameter("UnitPerCase", unitPerCase) :
                new ObjectParameter("UnitPerCase", typeof(int));
    
            var receivedQtyParameter = receivedQty.HasValue ?
                new ObjectParameter("ReceivedQty", receivedQty) :
                new ObjectParameter("ReceivedQty", typeof(long));
    
            var rejectedQtyParameter = rejectedQty.HasValue ?
                new ObjectParameter("RejectedQty", rejectedQty) :
                new ObjectParameter("RejectedQty", typeof(long));
    
            var stockedQtyParameter = stockedQty.HasValue ?
                new ObjectParameter("StockedQty", stockedQty) :
                new ObjectParameter("StockedQty", typeof(long));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePurchaseOrderDetail", purchaseOrderIDParameter, purchaseOrderDetailIDParameter, dueDateParameter, orderQtyParameter, productIDParameter, unitPriceParameter, numberOfCasesParameter, unitPerCaseParameter, receivedQtyParameter, rejectedQtyParameter, stockedQtyParameter, modifiedDateParameter);
        }
    
        public virtual int UpdatePurchaseOrderHeader(Nullable<int> purchaseOrderID, string revisionNumber, Nullable<byte> status, Nullable<int> employeeID, Nullable<int> vendorID, Nullable<int> shipMethodID, Nullable<System.DateTime> orderDate, Nullable<System.DateTime> shipDate, Nullable<decimal> subTotal, Nullable<decimal> taxAmt, Nullable<decimal> freight, Nullable<decimal> totalDue, Nullable<System.DateTime> modifiedDate)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var revisionNumberParameter = revisionNumber != null ?
                new ObjectParameter("RevisionNumber", revisionNumber) :
                new ObjectParameter("RevisionNumber", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var shipMethodIDParameter = shipMethodID.HasValue ?
                new ObjectParameter("ShipMethodID", shipMethodID) :
                new ObjectParameter("ShipMethodID", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var shipDateParameter = shipDate.HasValue ?
                new ObjectParameter("ShipDate", shipDate) :
                new ObjectParameter("ShipDate", typeof(System.DateTime));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var taxAmtParameter = taxAmt.HasValue ?
                new ObjectParameter("TaxAmt", taxAmt) :
                new ObjectParameter("TaxAmt", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var totalDueParameter = totalDue.HasValue ?
                new ObjectParameter("TotalDue", totalDue) :
                new ObjectParameter("TotalDue", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePurchaseOrderHeader", purchaseOrderIDParameter, revisionNumberParameter, statusParameter, employeeIDParameter, vendorIDParameter, shipMethodIDParameter, orderDateParameter, shipDateParameter, subTotalParameter, taxAmtParameter, freightParameter, totalDueParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateSalesInvoiceDetail(Nullable<int> invoiceDetailID, Nullable<int> invoiceID, Nullable<short> quantity, Nullable<int> productID, Nullable<int> specialOfferID, Nullable<decimal> unitPrice, Nullable<decimal> unitPriceDiscount, Nullable<decimal> lineTotal, Nullable<System.DateTime> modifiedDate)
        {
            var invoiceDetailIDParameter = invoiceDetailID.HasValue ?
                new ObjectParameter("InvoiceDetailID", invoiceDetailID) :
                new ObjectParameter("InvoiceDetailID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(short));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var specialOfferIDParameter = specialOfferID.HasValue ?
                new ObjectParameter("SpecialOfferID", specialOfferID) :
                new ObjectParameter("SpecialOfferID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var unitPriceDiscountParameter = unitPriceDiscount.HasValue ?
                new ObjectParameter("UnitPriceDiscount", unitPriceDiscount) :
                new ObjectParameter("UnitPriceDiscount", typeof(decimal));
    
            var lineTotalParameter = lineTotal.HasValue ?
                new ObjectParameter("LineTotal", lineTotal) :
                new ObjectParameter("LineTotal", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSalesInvoiceDetail", invoiceDetailIDParameter, invoiceIDParameter, quantityParameter, productIDParameter, specialOfferIDParameter, unitPriceParameter, unitPriceDiscountParameter, lineTotalParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateSalesInvoiceHeader(Nullable<int> invoiceID, string invoiceNumber, Nullable<System.DateTime> invoiceDate, Nullable<System.DateTime> dueDate, Nullable<byte> status, string accountNumber, Nullable<int> saleOrderID, Nullable<int> salesPersonID, Nullable<int> territoryID, Nullable<int> billToAddressID, Nullable<int> shipToAddressID, Nullable<int> paymentMethodID, Nullable<decimal> subTotal, Nullable<decimal> taxAmt, Nullable<decimal> freight, Nullable<decimal> totalDue, string comment, Nullable<System.DateTime> modifiedDate)
        {
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var saleOrderIDParameter = saleOrderID.HasValue ?
                new ObjectParameter("SaleOrderID", saleOrderID) :
                new ObjectParameter("SaleOrderID", typeof(int));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var billToAddressIDParameter = billToAddressID.HasValue ?
                new ObjectParameter("BillToAddressID", billToAddressID) :
                new ObjectParameter("BillToAddressID", typeof(int));
    
            var shipToAddressIDParameter = shipToAddressID.HasValue ?
                new ObjectParameter("ShipToAddressID", shipToAddressID) :
                new ObjectParameter("ShipToAddressID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var taxAmtParameter = taxAmt.HasValue ?
                new ObjectParameter("TaxAmt", taxAmt) :
                new ObjectParameter("TaxAmt", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var totalDueParameter = totalDue.HasValue ?
                new ObjectParameter("TotalDue", totalDue) :
                new ObjectParameter("TotalDue", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSalesInvoiceHeader", invoiceIDParameter, invoiceNumberParameter, invoiceDateParameter, dueDateParameter, statusParameter, accountNumberParameter, saleOrderIDParameter, salesPersonIDParameter, territoryIDParameter, billToAddressIDParameter, shipToAddressIDParameter, paymentMethodIDParameter, subTotalParameter, taxAmtParameter, freightParameter, totalDueParameter, commentParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateSalesOrderDetail(Nullable<int> salesOrderID, Nullable<int> salesOrderDetailID, string carrierTrackingNumber, Nullable<short> orderQty, Nullable<int> productID, Nullable<int> specialOfferID, Nullable<decimal> unitPrice, Nullable<decimal> unitPriceDiscount, Nullable<decimal> lineTotal, Nullable<System.DateTime> modifiedDate)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var salesOrderDetailIDParameter = salesOrderDetailID.HasValue ?
                new ObjectParameter("SalesOrderDetailID", salesOrderDetailID) :
                new ObjectParameter("SalesOrderDetailID", typeof(int));
    
            var carrierTrackingNumberParameter = carrierTrackingNumber != null ?
                new ObjectParameter("CarrierTrackingNumber", carrierTrackingNumber) :
                new ObjectParameter("CarrierTrackingNumber", typeof(string));
    
            var orderQtyParameter = orderQty.HasValue ?
                new ObjectParameter("OrderQty", orderQty) :
                new ObjectParameter("OrderQty", typeof(short));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var specialOfferIDParameter = specialOfferID.HasValue ?
                new ObjectParameter("SpecialOfferID", specialOfferID) :
                new ObjectParameter("SpecialOfferID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var unitPriceDiscountParameter = unitPriceDiscount.HasValue ?
                new ObjectParameter("UnitPriceDiscount", unitPriceDiscount) :
                new ObjectParameter("UnitPriceDiscount", typeof(decimal));
    
            var lineTotalParameter = lineTotal.HasValue ?
                new ObjectParameter("LineTotal", lineTotal) :
                new ObjectParameter("LineTotal", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSalesOrderDetail", salesOrderIDParameter, salesOrderDetailIDParameter, carrierTrackingNumberParameter, orderQtyParameter, productIDParameter, specialOfferIDParameter, unitPriceParameter, unitPriceDiscountParameter, lineTotalParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateSalesOrderHeader(Nullable<int> salesOrderID, Nullable<System.DateTime> orderDate, Nullable<System.DateTime> dueDate, Nullable<System.DateTime> shipDate, Nullable<byte> status, Nullable<bool> onlineOrderFlag, string salesOrderNumber, string purchaseOrderNumber, Nullable<int> customerID, Nullable<int> salesPersonID, Nullable<int> billToAddressID, Nullable<int> shipToAddressID, Nullable<int> shipMethodID, Nullable<int> paymentMethodID, Nullable<int> currencyRateID, Nullable<decimal> subTotal, Nullable<decimal> taxAmt, Nullable<decimal> freight, Nullable<decimal> totalDue, string comment, Nullable<System.DateTime> modifiedDate)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var shipDateParameter = shipDate.HasValue ?
                new ObjectParameter("ShipDate", shipDate) :
                new ObjectParameter("ShipDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var onlineOrderFlagParameter = onlineOrderFlag.HasValue ?
                new ObjectParameter("OnlineOrderFlag", onlineOrderFlag) :
                new ObjectParameter("OnlineOrderFlag", typeof(bool));
    
            var salesOrderNumberParameter = salesOrderNumber != null ?
                new ObjectParameter("SalesOrderNumber", salesOrderNumber) :
                new ObjectParameter("SalesOrderNumber", typeof(string));
    
            var purchaseOrderNumberParameter = purchaseOrderNumber != null ?
                new ObjectParameter("PurchaseOrderNumber", purchaseOrderNumber) :
                new ObjectParameter("PurchaseOrderNumber", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var billToAddressIDParameter = billToAddressID.HasValue ?
                new ObjectParameter("BillToAddressID", billToAddressID) :
                new ObjectParameter("BillToAddressID", typeof(int));
    
            var shipToAddressIDParameter = shipToAddressID.HasValue ?
                new ObjectParameter("ShipToAddressID", shipToAddressID) :
                new ObjectParameter("ShipToAddressID", typeof(int));
    
            var shipMethodIDParameter = shipMethodID.HasValue ?
                new ObjectParameter("ShipMethodID", shipMethodID) :
                new ObjectParameter("ShipMethodID", typeof(int));
    
            var paymentMethodIDParameter = paymentMethodID.HasValue ?
                new ObjectParameter("PaymentMethodID", paymentMethodID) :
                new ObjectParameter("PaymentMethodID", typeof(int));
    
            var currencyRateIDParameter = currencyRateID.HasValue ?
                new ObjectParameter("CurrencyRateID", currencyRateID) :
                new ObjectParameter("CurrencyRateID", typeof(int));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var taxAmtParameter = taxAmt.HasValue ?
                new ObjectParameter("TaxAmt", taxAmt) :
                new ObjectParameter("TaxAmt", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var totalDueParameter = totalDue.HasValue ?
                new ObjectParameter("TotalDue", totalDue) :
                new ObjectParameter("TotalDue", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSalesOrderHeader", salesOrderIDParameter, orderDateParameter, dueDateParameter, shipDateParameter, statusParameter, onlineOrderFlagParameter, salesOrderNumberParameter, purchaseOrderNumberParameter, customerIDParameter, salesPersonIDParameter, billToAddressIDParameter, shipToAddressIDParameter, shipMethodIDParameter, paymentMethodIDParameter, currencyRateIDParameter, subTotalParameter, taxAmtParameter, freightParameter, totalDueParameter, commentParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateSalesPerson(Nullable<int> salesPersonID, Nullable<int> territoryID, Nullable<decimal> salesQuota, Nullable<decimal> bonus, Nullable<decimal> commissionPct, Nullable<System.DateTime> modifiedDate)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var salesQuotaParameter = salesQuota.HasValue ?
                new ObjectParameter("SalesQuota", salesQuota) :
                new ObjectParameter("SalesQuota", typeof(decimal));
    
            var bonusParameter = bonus.HasValue ?
                new ObjectParameter("Bonus", bonus) :
                new ObjectParameter("Bonus", typeof(decimal));
    
            var commissionPctParameter = commissionPct.HasValue ?
                new ObjectParameter("CommissionPct", commissionPct) :
                new ObjectParameter("CommissionPct", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSalesPerson", salesPersonIDParameter, territoryIDParameter, salesQuotaParameter, bonusParameter, commissionPctParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateSalesPersonQuotaHistory(Nullable<int> salesPersonID, Nullable<System.DateTime> quotaDate, Nullable<decimal> salesQuota, Nullable<System.DateTime> modifiedDate)
        {
            var salesPersonIDParameter = salesPersonID.HasValue ?
                new ObjectParameter("SalesPersonID", salesPersonID) :
                new ObjectParameter("SalesPersonID", typeof(int));
    
            var quotaDateParameter = quotaDate.HasValue ?
                new ObjectParameter("QuotaDate", quotaDate) :
                new ObjectParameter("QuotaDate", typeof(System.DateTime));
    
            var salesQuotaParameter = salesQuota.HasValue ?
                new ObjectParameter("SalesQuota", salesQuota) :
                new ObjectParameter("SalesQuota", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSalesPersonQuotaHistory", salesPersonIDParameter, quotaDateParameter, salesQuotaParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateSalesTaxRate(Nullable<int> salesTaxRateID, string stateProvinceID, Nullable<byte> taxType, Nullable<decimal> taxRate, string name, Nullable<System.DateTime> modifiedDate)
        {
            var salesTaxRateIDParameter = salesTaxRateID.HasValue ?
                new ObjectParameter("SalesTaxRateID", salesTaxRateID) :
                new ObjectParameter("SalesTaxRateID", typeof(int));
    
            var stateProvinceIDParameter = stateProvinceID != null ?
                new ObjectParameter("StateProvinceID", stateProvinceID) :
                new ObjectParameter("StateProvinceID", typeof(string));
    
            var taxTypeParameter = taxType.HasValue ?
                new ObjectParameter("TaxType", taxType) :
                new ObjectParameter("TaxType", typeof(byte));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSalesTaxRate", salesTaxRateIDParameter, stateProvinceIDParameter, taxTypeParameter, taxRateParameter, nameParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateSalesTerritory(Nullable<int> territoryID, string name, string countryRegionCode, Nullable<System.DateTime> modifiedDate)
        {
            var territoryIDParameter = territoryID.HasValue ?
                new ObjectParameter("TerritoryID", territoryID) :
                new ObjectParameter("TerritoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var countryRegionCodeParameter = countryRegionCode != null ?
                new ObjectParameter("CountryRegionCode", countryRegionCode) :
                new ObjectParameter("CountryRegionCode", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSalesTerritory", territoryIDParameter, nameParameter, countryRegionCodeParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateSalesTerritoryHistory(Nullable<int> iD, Nullable<System.DateTime> endDate, Nullable<System.DateTime> modifiedDate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSalesTerritoryHistory", iDParameter, endDateParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateShipMethod(Nullable<int> shipMethodID, string name, Nullable<decimal> shipBase, Nullable<decimal> shipRate, Nullable<System.DateTime> modifiedDate)
        {
            var shipMethodIDParameter = shipMethodID.HasValue ?
                new ObjectParameter("ShipMethodID", shipMethodID) :
                new ObjectParameter("ShipMethodID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var shipBaseParameter = shipBase.HasValue ?
                new ObjectParameter("ShipBase", shipBase) :
                new ObjectParameter("ShipBase", typeof(decimal));
    
            var shipRateParameter = shipRate.HasValue ?
                new ObjectParameter("ShipRate", shipRate) :
                new ObjectParameter("ShipRate", typeof(decimal));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateShipMethod", shipMethodIDParameter, nameParameter, shipBaseParameter, shipRateParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateSpecialOffer(Nullable<int> specialOfferID, string description, Nullable<decimal> discountPct, string type, string category, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> minQty, Nullable<int> maxQty, Nullable<System.DateTime> modifiedDate)
        {
            var specialOfferIDParameter = specialOfferID.HasValue ?
                new ObjectParameter("SpecialOfferID", specialOfferID) :
                new ObjectParameter("SpecialOfferID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var discountPctParameter = discountPct.HasValue ?
                new ObjectParameter("DiscountPct", discountPct) :
                new ObjectParameter("DiscountPct", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var minQtyParameter = minQty.HasValue ?
                new ObjectParameter("MinQty", minQty) :
                new ObjectParameter("MinQty", typeof(int));
    
            var maxQtyParameter = maxQty.HasValue ?
                new ObjectParameter("MaxQty", maxQty) :
                new ObjectParameter("MaxQty", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSpecialOffer", specialOfferIDParameter, descriptionParameter, discountPctParameter, typeParameter, categoryParameter, startDateParameter, endDateParameter, minQtyParameter, maxQtyParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateSpecialOfferProduct(Nullable<int> specialOfferID, Nullable<int> productID, Nullable<System.DateTime> modifiedDate)
        {
            var specialOfferIDParameter = specialOfferID.HasValue ?
                new ObjectParameter("SpecialOfferID", specialOfferID) :
                new ObjectParameter("SpecialOfferID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSpecialOfferProduct", specialOfferIDParameter, productIDParameter, modifiedDateParameter);
        }
    
        public virtual int UpdateUser(Nullable<int> iD, Nullable<int> employeeID, string userName, string password)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUser", iDParameter, employeeIDParameter, userNameParameter, passwordParameter);
        }
    
        public virtual int UpdateVendor(Nullable<int> vendorID, string accountNumber, string name, string contactName, Nullable<byte> creditRating, Nullable<bool> preferredVendorStatus, string phone, string fax, string email, Nullable<bool> activeFlag, Nullable<System.DateTime> modifiedDate, Nullable<int> addressID, string altPhone, string terms)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var creditRatingParameter = creditRating.HasValue ?
                new ObjectParameter("CreditRating", creditRating) :
                new ObjectParameter("CreditRating", typeof(byte));
    
            var preferredVendorStatusParameter = preferredVendorStatus.HasValue ?
                new ObjectParameter("PreferredVendorStatus", preferredVendorStatus) :
                new ObjectParameter("PreferredVendorStatus", typeof(bool));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var activeFlagParameter = activeFlag.HasValue ?
                new ObjectParameter("ActiveFlag", activeFlag) :
                new ObjectParameter("ActiveFlag", typeof(bool));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var altPhoneParameter = altPhone != null ?
                new ObjectParameter("AltPhone", altPhone) :
                new ObjectParameter("AltPhone", typeof(string));
    
            var termsParameter = terms != null ?
                new ObjectParameter("Terms", terms) :
                new ObjectParameter("Terms", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateVendor", vendorIDParameter, accountNumberParameter, nameParameter, contactNameParameter, creditRatingParameter, preferredVendorStatusParameter, phoneParameter, faxParameter, emailParameter, activeFlagParameter, modifiedDateParameter, addressIDParameter, altPhoneParameter, termsParameter);
        }
    
        public virtual ObjectResult<ViewSalesPersonsAll_Result> ViewSalesPersonsAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewSalesPersonsAll_Result>("ViewSalesPersonsAll");
        }
    
        public virtual ObjectResult<ViewSalesTerritoryList_Result> ViewSalesTerritoryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewSalesTerritoryList_Result>("ViewSalesTerritoryList");
        }
    }
}
